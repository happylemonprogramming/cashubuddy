{"version":3,"file":"cashu-ts.es.js","sources":["../src/base64.ts","../src/cbor.ts","../src/model/PaymentRequest.ts","../src/utils/Constants.ts","../src/utils.ts","../src/ws.ts","../src/WSConnection.ts","../src/model/types/mint/responses.ts","../src/model/types/wallet/paymentRequests.ts","../src/model/Errors.ts","../src/request.ts","../src/legacy/nut-05.ts","../src/legacy/nut-04.ts","../src/legacy/nut-06.ts","../src/CashuMint.ts","../src/model/MintInfo.ts","../src/model/BlindedMessage.ts","../src/model/OutputData.ts","../src/CashuWallet.ts"],"sourcesContent":["import { Buffer } from 'buffer';\n\nfunction encodeUint8toBase64(uint8array: Uint8Array): string {\n\treturn Buffer.from(uint8array).toString('base64');\n}\n\nfunction encodeUint8toBase64Url(bytes: Uint8Array): string {\n\treturn Buffer.from(bytes)\n\t\t.toString('base64')\n\t\t.replace(/\\+/g, '-') // Replace + with -\n\t\t.replace(/\\//g, '_') // Replace / with _\n\t\t.replace(/=+$/, ''); // Remove padding characters\n}\n\nfunction encodeBase64toUint8(base64String: string): Uint8Array {\n\treturn Buffer.from(base64String, 'base64');\n}\n\nfunction encodeJsonToBase64(jsonObj: unknown): string {\n\tconst jsonString = JSON.stringify(jsonObj);\n\treturn base64urlFromBase64(Buffer.from(jsonString).toString('base64'));\n}\n\nfunction encodeBase64ToJson<T extends object>(base64String: string): T {\n\tconst jsonString = Buffer.from(base64urlToBase64(base64String), 'base64').toString();\n\tconst jsonObj = JSON.parse(jsonString) as T;\n\treturn jsonObj;\n}\n\nfunction base64urlToBase64(str: string) {\n\treturn str.replace(/-/g, '+').replace(/_/g, '/').split('=')[0];\n\t// .replace(/./g, '=');\n}\n\nfunction base64urlFromBase64(str: string) {\n\treturn str.replace(/\\+/g, '-').replace(/\\//g, '_').split('=')[0];\n\t// .replace(/=/g, '.');\n}\n\nexport {\n\tencodeUint8toBase64,\n\tencodeUint8toBase64Url,\n\tencodeBase64toUint8,\n\tencodeJsonToBase64,\n\tencodeBase64ToJson\n};\n","type SimpleValue = boolean | null | undefined;\n\nexport type ResultObject = { [key: string]: ResultValue };\nexport type ResultValue =\n\t| SimpleValue\n\t| number\n\t| string\n\t| Uint8Array\n\t| Array<ResultValue>\n\t| ResultObject;\n\ntype ResultKeyType = Extract<ResultValue, number | string>;\nexport type ValidDecodedType = Extract<ResultValue, ResultObject>;\n\nfunction isResultKeyType(value: ResultValue): value is ResultKeyType {\n\treturn typeof value === 'number' || typeof value === 'string';\n}\n\ntype DecodeResult<T extends ResultValue> = {\n\tvalue: T;\n\toffset: number;\n};\n\nexport function encodeCBOR(value: any) {\n\tconst buffer: Array<number> = [];\n\tencodeItem(value, buffer);\n\treturn new Uint8Array(buffer);\n}\n\nfunction encodeItem(value: any, buffer: Array<number>) {\n\tif (value === null) {\n\t\tbuffer.push(0xf6);\n\t} else if (value === undefined) {\n\t\tbuffer.push(0xf7);\n\t} else if (typeof value === 'boolean') {\n\t\tbuffer.push(value ? 0xf5 : 0xf4);\n\t} else if (typeof value === 'number') {\n\t\tencodeUnsigned(value, buffer);\n\t} else if (typeof value === 'string') {\n\t\tencodeString(value, buffer);\n\t} else if (Array.isArray(value)) {\n\t\tencodeArray(value, buffer);\n\t} else if (value instanceof Uint8Array) {\n\t\tencodeByteString(value, buffer);\n\t} else if (typeof value === 'object') {\n\t\tencodeObject(value, buffer);\n\t} else {\n\t\tthrow new Error('Unsupported type');\n\t}\n}\n\nfunction encodeUnsigned(value: number, buffer: Array<number>) {\n\tif (value < 24) {\n\t\tbuffer.push(value);\n\t} else if (value < 256) {\n\t\tbuffer.push(0x18, value);\n\t} else if (value < 65536) {\n\t\tbuffer.push(0x19, value >> 8, value & 0xff);\n\t} else if (value < 4294967296) {\n\t\tbuffer.push(0x1a, value >> 24, (value >> 16) & 0xff, (value >> 8) & 0xff, value & 0xff);\n\t} else {\n\t\tthrow new Error('Unsupported integer size');\n\t}\n}\n\nfunction encodeByteString(value: Uint8Array, buffer: Array<number>) {\n\tconst length = value.length;\n\n\tif (length < 24) {\n\t\tbuffer.push(0x40 + length);\n\t} else if (length < 256) {\n\t\tbuffer.push(0x58, length);\n\t} else if (length < 65536) {\n\t\tbuffer.push(0x59, (length >> 8) & 0xff, length & 0xff);\n\t} else if (length < 4294967296) {\n\t\tbuffer.push(\n\t\t\t0x5a,\n\t\t\t(length >> 24) & 0xff,\n\t\t\t(length >> 16) & 0xff,\n\t\t\t(length >> 8) & 0xff,\n\t\t\tlength & 0xff\n\t\t);\n\t} else {\n\t\tthrow new Error('Byte string too long to encode');\n\t}\n\n\tfor (let i = 0; i < value.length; i++) {\n\t\tbuffer.push(value[i]);\n\t}\n}\n\nfunction encodeString(value: string, buffer: Array<number>) {\n\tconst utf8 = new TextEncoder().encode(value);\n\tconst length = utf8.length;\n\n\tif (length < 24) {\n\t\tbuffer.push(0x60 + length);\n\t} else if (length < 256) {\n\t\tbuffer.push(0x78, length);\n\t} else if (length < 65536) {\n\t\tbuffer.push(0x79, (length >> 8) & 0xff, length & 0xff);\n\t} else if (length < 4294967296) {\n\t\tbuffer.push(\n\t\t\t0x7a,\n\t\t\t(length >> 24) & 0xff,\n\t\t\t(length >> 16) & 0xff,\n\t\t\t(length >> 8) & 0xff,\n\t\t\tlength & 0xff\n\t\t);\n\t} else {\n\t\tthrow new Error('String too long to encode');\n\t}\n\n\tfor (let i = 0; i < utf8.length; i++) {\n\t\tbuffer.push(utf8[i]);\n\t}\n}\n\nfunction encodeArray(value: Array<any>, buffer: Array<number>) {\n\tconst length = value.length;\n\tif (length < 24) {\n\t\tbuffer.push(0x80 | length);\n\t} else if (length < 256) {\n\t\tbuffer.push(0x98, length);\n\t} else if (length < 65536) {\n\t\tbuffer.push(0x99, length >> 8, length & 0xff);\n\t} else {\n\t\tthrow new Error('Unsupported array length');\n\t}\n\n\tfor (const item of value) {\n\t\tencodeItem(item, buffer);\n\t}\n}\n\nfunction encodeObject(value: { [key: string]: any }, buffer: Array<number>) {\n\tconst keys = Object.keys(value);\n\tencodeUnsigned(keys.length, buffer);\n\tbuffer[buffer.length - 1] |= 0xa0;\n\tfor (const key of keys) {\n\t\tencodeString(key, buffer);\n\t\tencodeItem(value[key], buffer);\n\t}\n}\n\nexport function decodeCBOR(data: Uint8Array): ResultValue {\n\tconst view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\tconst result = decodeItem(view, 0);\n\treturn result.value;\n}\n\nfunction decodeItem(view: DataView, offset: number): DecodeResult<ResultValue> {\n\tif (offset >= view.byteLength) {\n\t\tthrow new Error('Unexpected end of data');\n\t}\n\tconst initialByte = view.getUint8(offset++);\n\tconst majorType = initialByte >> 5;\n\tconst additionalInfo = initialByte & 0x1f;\n\n\tswitch (majorType) {\n\t\tcase 0:\n\t\t\treturn decodeUnsigned(view, offset, additionalInfo);\n\t\tcase 1:\n\t\t\treturn decodeSigned(view, offset, additionalInfo);\n\t\tcase 2:\n\t\t\treturn decodeByteString(view, offset, additionalInfo);\n\t\tcase 3:\n\t\t\treturn decodeString(view, offset, additionalInfo);\n\t\tcase 4:\n\t\t\treturn decodeArray(view, offset, additionalInfo);\n\t\tcase 5:\n\t\t\treturn decodeMap(view, offset, additionalInfo);\n\t\tcase 7:\n\t\t\treturn decodeSimpleAndFloat(view, offset, additionalInfo);\n\t\tdefault:\n\t\t\tthrow new Error(`Unsupported major type: ${majorType}`);\n\t}\n}\n\nfunction decodeLength(\n\tview: DataView,\n\toffset: number,\n\tadditionalInfo: number\n): DecodeResult<number> {\n\tif (additionalInfo < 24) return { value: additionalInfo, offset };\n\tif (additionalInfo === 24) return { value: view.getUint8(offset++), offset };\n\tif (additionalInfo === 25) {\n\t\tconst value = view.getUint16(offset, false);\n\t\toffset += 2;\n\t\treturn { value, offset };\n\t}\n\tif (additionalInfo === 26) {\n\t\tconst value = view.getUint32(offset, false);\n\t\toffset += 4;\n\t\treturn { value, offset };\n\t}\n\tif (additionalInfo === 27) {\n\t\tconst hi = view.getUint32(offset, false);\n\t\tconst lo = view.getUint32(offset + 4, false);\n\t\toffset += 8;\n\t\treturn { value: hi * 2 ** 32 + lo, offset };\n\t}\n\tthrow new Error(`Unsupported length: ${additionalInfo}`);\n}\n\nfunction decodeUnsigned(\n\tview: DataView,\n\toffset: number,\n\tadditionalInfo: number\n): DecodeResult<number> {\n\tconst { value, offset: newOffset } = decodeLength(view, offset, additionalInfo);\n\treturn { value, offset: newOffset };\n}\n\nfunction decodeSigned(\n\tview: DataView,\n\toffset: number,\n\tadditionalInfo: number\n): DecodeResult<number> {\n\tconst { value, offset: newOffset } = decodeLength(view, offset, additionalInfo);\n\treturn { value: -1 - value, offset: newOffset };\n}\n\nfunction decodeByteString(\n\tview: DataView,\n\toffset: number,\n\tadditionalInfo: number\n): DecodeResult<Uint8Array> {\n\tconst { value: length, offset: newOffset } = decodeLength(view, offset, additionalInfo);\n\tif (newOffset + length > view.byteLength) {\n\t\tthrow new Error('Byte string length exceeds data length');\n\t}\n\tconst value = new Uint8Array(view.buffer, view.byteOffset + newOffset, length);\n\treturn { value, offset: newOffset + length };\n}\n\nfunction decodeString(\n\tview: DataView,\n\toffset: number,\n\tadditionalInfo: number\n): DecodeResult<string> {\n\tconst { value: length, offset: newOffset } = decodeLength(view, offset, additionalInfo);\n\tif (newOffset + length > view.byteLength) {\n\t\tthrow new Error('String length exceeds data length');\n\t}\n\tconst bytes = new Uint8Array(view.buffer, view.byteOffset + newOffset, length);\n\tconst value = new TextDecoder().decode(bytes);\n\treturn { value, offset: newOffset + length };\n}\n\nfunction decodeArray(\n\tview: DataView,\n\toffset: number,\n\tadditionalInfo: number\n): DecodeResult<Array<ResultValue>> {\n\tconst { value: length, offset: newOffset } = decodeLength(view, offset, additionalInfo);\n\tconst array = [];\n\tlet currentOffset = newOffset;\n\tfor (let i = 0; i < length; i++) {\n\t\tconst result = decodeItem(view, currentOffset);\n\t\tarray.push(result.value);\n\t\tcurrentOffset = result.offset;\n\t}\n\treturn { value: array, offset: currentOffset };\n}\n\nfunction decodeMap(\n\tview: DataView,\n\toffset: number,\n\tadditionalInfo: number\n): DecodeResult<Record<string, ResultValue>> {\n\tconst { value: length, offset: newOffset } = decodeLength(view, offset, additionalInfo);\n\tconst map: { [key: string]: ResultValue } = {};\n\tlet currentOffset = newOffset;\n\tfor (let i = 0; i < length; i++) {\n\t\tconst keyResult = decodeItem(view, currentOffset);\n\t\tif (!isResultKeyType(keyResult.value)) {\n\t\t\tthrow new Error('Invalid key type');\n\t\t}\n\t\tconst valueResult = decodeItem(view, keyResult.offset);\n\t\tmap[keyResult.value] = valueResult.value;\n\t\tcurrentOffset = valueResult.offset;\n\t}\n\treturn { value: map, offset: currentOffset };\n}\n\nfunction decodeFloat16(uint16: number): number {\n\tconst exponent = (uint16 & 0x7c00) >> 10;\n\tconst fraction = uint16 & 0x03ff;\n\tconst sign = uint16 & 0x8000 ? -1 : 1;\n\n\tif (exponent === 0) {\n\t\treturn sign * 2 ** -14 * (fraction / 1024);\n\t} else if (exponent === 0x1f) {\n\t\treturn fraction ? NaN : sign * Infinity;\n\t}\n\treturn sign * 2 ** (exponent - 15) * (1 + fraction / 1024);\n}\n\nfunction decodeSimpleAndFloat(\n\tview: DataView,\n\toffset: number,\n\tadditionalInfo: number\n): DecodeResult<SimpleValue | number> {\n\tif (additionalInfo < 24) {\n\t\tswitch (additionalInfo) {\n\t\t\tcase 20:\n\t\t\t\treturn { value: false, offset };\n\t\t\tcase 21:\n\t\t\t\treturn { value: true, offset };\n\t\t\tcase 22:\n\t\t\t\treturn { value: null, offset };\n\t\t\tcase 23:\n\t\t\t\treturn { value: undefined, offset };\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown simple value: ${additionalInfo}`);\n\t\t}\n\t}\n\tif (additionalInfo === 24) return { value: view.getUint8(offset++), offset };\n\tif (additionalInfo === 25) {\n\t\tconst value = decodeFloat16(view.getUint16(offset, false));\n\t\toffset += 2;\n\t\treturn { value, offset };\n\t}\n\tif (additionalInfo === 26) {\n\t\tconst value = view.getFloat32(offset, false);\n\t\toffset += 4;\n\t\treturn { value, offset };\n\t}\n\tif (additionalInfo === 27) {\n\t\tconst value = view.getFloat64(offset, false);\n\t\toffset += 8;\n\t\treturn { value, offset };\n\t}\n\tthrow new Error(`Unknown simple or float value: ${additionalInfo}`);\n}\n","import { encodeBase64toUint8 } from '../base64';\nimport { decodeCBOR, encodeCBOR } from '../cbor';\nimport {\n\tRawPaymentRequest,\n\tRawTransport,\n\tPaymentRequestTransport,\n\tPaymentRequestTransportType\n} from './types';\nimport { Buffer } from 'buffer';\n\nexport class PaymentRequest {\n\tconstructor(\n\t\tpublic transport: Array<PaymentRequestTransport>,\n\t\tpublic id?: string,\n\t\tpublic amount?: number,\n\t\tpublic unit?: string,\n\t\tpublic mints?: Array<string>,\n\t\tpublic description?: string,\n\t\tpublic singleUse: boolean = false\n\t) {}\n\n\ttoEncodedRequest() {\n\t\tconst rawRequest: RawPaymentRequest = {\n\t\t\tt: this.transport.map((t: PaymentRequestTransport) => ({ t: t.type, a: t.target, g: t.tags }))\n\t\t};\n\t\tif (this.id) {\n\t\t\trawRequest.i = this.id;\n\t\t}\n\t\tif (this.amount) {\n\t\t\trawRequest.a = this.amount;\n\t\t}\n\t\tif (this.unit) {\n\t\t\trawRequest.u = this.unit;\n\t\t}\n\t\tif (this.mints) {\n\t\t\trawRequest.m = this.mints;\n\t\t}\n\t\tif (this.description) {\n\t\t\trawRequest.d = this.description;\n\t\t}\n\t\tif (this.singleUse) {\n\t\t\trawRequest.s = this.singleUse;\n\t\t}\n\n\t\tconst data = encodeCBOR(rawRequest);\n\t\tconst encodedData = Buffer.from(data).toString('base64');\n\t\treturn 'creq' + 'A' + encodedData;\n\t}\n\n\tgetTransport(type: PaymentRequestTransportType) {\n\t\treturn this.transport.find((t: PaymentRequestTransport) => t.type === type);\n\t}\n\n\tstatic fromEncodedRequest(encodedRequest: string): PaymentRequest {\n\t\tif (!encodedRequest.startsWith('creq')) {\n\t\t\tthrow new Error('unsupported pr: invalid prefix');\n\t\t}\n\t\tconst version = encodedRequest[4];\n\t\tif (version !== 'A') {\n\t\t\tthrow new Error('unsupported pr version');\n\t\t}\n\t\tconst encodedData = encodedRequest.slice(5);\n\t\tconst data = encodeBase64toUint8(encodedData);\n\t\tconst decoded = decodeCBOR(data) as RawPaymentRequest;\n\t\tconst transports = decoded.t.map((t: RawTransport) => ({ type: t.t, target: t.a, tags: t.g }));\n\t\treturn new PaymentRequest(\n\t\t\ttransports,\n\t\t\tdecoded.i,\n\t\t\tdecoded.a,\n\t\t\tdecoded.u,\n\t\t\tdecoded.m,\n\t\t\tdecoded.d,\n\t\t\tdecoded.s\n\t\t);\n\t}\n}\n","/**\n * per protocol definition since tokenV3 tokens have a prefix and a version number\n */\nconst TOKEN_VERSION = 'A';\nconst TOKEN_PREFIX = 'cashu';\n\nexport { TOKEN_VERSION, TOKEN_PREFIX };\n","import { verifyDLEQProof_reblind } from '@cashu/crypto/modules/client/NUT12';\nimport { DLEQ, pointFromHex } from '@cashu/crypto/modules/common';\nimport { bytesToHex, hexToBytes } from '@noble/curves/abstract/utils';\nimport { sha256 } from '@noble/hashes/sha256';\nimport {\n\tencodeBase64ToJson,\n\tencodeBase64toUint8,\n\tencodeJsonToBase64,\n\tencodeUint8toBase64Url\n} from './base64.js';\nimport { decodeCBOR, encodeCBOR } from './cbor.js';\nimport { PaymentRequest } from './model/PaymentRequest.js';\nimport {\n\tDeprecatedToken,\n\tKeys,\n\tMintKeys,\n\tProof,\n\tSerializedDLEQ,\n\tToken,\n\tTokenV4Template,\n\tV4DLEQTemplate,\n\tV4InnerToken,\n\tV4ProofTemplate\n} from './model/types/index.js';\nimport { TOKEN_PREFIX, TOKEN_VERSION } from './utils/Constants.js';\n\n/**\n * Splits the amount into denominations of the provided @param keyset\n * @param value amount to split\n * @param keyset keys to look up split amounts\n * @param split? optional custom split amounts\n * @param order? optional order for split amounts (default: \"asc\")\n * @returns Array of split amounts\n * @throws Error if @param split amount is greater than @param value amount\n */\nexport function splitAmount(\n\tvalue: number,\n\tkeyset: Keys,\n\tsplit?: Array<number>,\n\torder?: 'desc' | 'asc'\n): Array<number> {\n\tif (split) {\n\t\tconst totalSplitAmount = sumArray(split);\n\t\tif (totalSplitAmount > value) {\n\t\t\tthrow new Error(`Split is greater than total amount: ${totalSplitAmount} > ${value}`);\n\t\t}\n\t\tif (split.some((amt) => !hasCorrespondingKey(amt, keyset))) {\n\t\t\tthrow new Error('Provided amount preferences do not match the amounts of the mint keyset.');\n\t\t}\n\t\tvalue = value - sumArray(split);\n\t} else {\n\t\tsplit = [];\n\t}\n\tconst sortedKeyAmounts = getKeysetAmounts(keyset, 'desc');\n\tsortedKeyAmounts.forEach((amt: number) => {\n\t\tconst q = Math.floor(value / amt);\n\t\tfor (let i = 0; i < q; ++i) split?.push(amt);\n\t\tvalue %= amt;\n\t});\n\treturn split.sort((a, b) => (order === 'desc' ? b - a : a - b));\n}\n\n/**\n * Creates a list of amounts to keep based on the proofs we have and the proofs we want to reach.\n * @param proofsWeHave complete set of proofs stored (from current mint)\n * @param amountToKeep amount to keep\n * @param keys keys of current keyset\n * @param targetCount the target number of proofs to reach\n * @returns an array of amounts to keep\n */\nexport function getKeepAmounts(\n\tproofsWeHave: Array<Proof>,\n\tamountToKeep: number,\n\tkeys: Keys,\n\ttargetCount: number\n): Array<number> {\n\t// determines amounts we need to reach the targetCount for each amount based on the amounts of the proofs we have\n\t// it tries to select amounts so that the proofs we have and the proofs we want reach the targetCount\n\tconst amountsWeWant: Array<number> = [];\n\tconst amountsWeHave = proofsWeHave.map((p: Proof) => p.amount);\n\tconst sortedKeyAmounts = getKeysetAmounts(keys, 'asc');\n\tsortedKeyAmounts.forEach((amt) => {\n\t\tconst countWeHave = amountsWeHave.filter((a) => a === amt).length;\n\t\tconst countWeWant = Math.max(targetCount - countWeHave, 0);\n\t\tfor (let i = 0; i < countWeWant; ++i) {\n\t\t\tif (amountsWeWant.reduce((a, b) => a + b, 0) + amt > amountToKeep) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tamountsWeWant.push(amt);\n\t\t}\n\t});\n\t// use splitAmount to fill the rest between the sum of amountsWeHave and amountToKeep\n\tconst amountDiff = amountToKeep - amountsWeWant.reduce((a, b) => a + b, 0);\n\tif (amountDiff) {\n\t\tconst remainingAmounts = splitAmount(amountDiff, keys);\n\t\tremainingAmounts.forEach((amt: number) => {\n\t\t\tamountsWeWant.push(amt);\n\t\t});\n\t}\n\tconst sortedAmountsWeWant = amountsWeWant.sort((a, b) => a - b);\n\treturn sortedAmountsWeWant;\n}\n/**\n * returns the amounts in the keyset sorted by the order specified\n * @param keyset to search in\n * @param order order to sort the amounts in\n * @returns the amounts in the keyset sorted by the order specified\n */\nexport function getKeysetAmounts(keyset: Keys, order: 'asc' | 'desc' = 'desc'): Array<number> {\n\tif (order == 'desc') {\n\t\treturn Object.keys(keyset)\n\t\t\t.map((k: string) => parseInt(k))\n\t\t\t.sort((a: number, b: number) => b - a);\n\t}\n\treturn Object.keys(keyset)\n\t\t.map((k: string) => parseInt(k))\n\t\t.sort((a: number, b: number) => a - b);\n}\n\n/**\n * Checks if the provided amount is in the keyset.\n * @param amount amount to check\n * @param keyset to search in\n * @returns true if the amount is in the keyset, false otherwise\n */\nexport function hasCorrespondingKey(amount: number, keyset: Keys): boolean {\n\treturn amount in keyset;\n}\n\n/**\n * Converts a bytes array to a number.\n * @param bytes to convert to number\n * @returns  number\n */\nexport function bytesToNumber(bytes: Uint8Array): bigint {\n\treturn hexToNumber(bytesToHex(bytes));\n}\n\n/**\n * Converts a hex string to a number.\n * @param hex to convert to number\n * @returns number\n */\nexport function hexToNumber(hex: string): bigint {\n\treturn BigInt(`0x${hex}`);\n}\n\n/**\n * Converts a number to a hex string of 64 characters.\n * @param number (bigint) to conver to hex\n * @returns hex string start-padded to 64 characters\n */\nexport function numberToHexPadded64(number: bigint): string {\n\treturn number.toString(16).padStart(64, '0');\n}\n\nfunction isValidHex(str: string) {\n\treturn /^[a-f0-9]*$/i.test(str);\n}\n\n/**\n * Checks wether a proof or a list of proofs contains a non-hex id\n * @param p Proof or list of proofs\n * @returns boolean\n */\nexport function hasNonHexId(p: Proof | Array<Proof>) {\n\tif (Array.isArray(p)) {\n\t\treturn p.some((proof) => !isValidHex(proof.id));\n\t}\n\treturn isValidHex(p.id);\n}\n\n//used for json serialization\nexport function bigIntStringify<T>(_key: unknown, value: T) {\n\treturn typeof value === 'bigint' ? value.toString() : value;\n}\n\n/**\n * Helper function to encode a v3 cashu token\n * @param token to encode\n * @returns encoded token\n */\nexport function getEncodedTokenV3(token: Token): string {\n\tconst v3TokenObj: DeprecatedToken = { token: [{ mint: token.mint, proofs: token.proofs }] };\n\tif (token.unit) {\n\t\tv3TokenObj.unit = token.unit;\n\t}\n\tif (token.memo) {\n\t\tv3TokenObj.memo = token.memo;\n\t}\n\treturn TOKEN_PREFIX + TOKEN_VERSION + encodeJsonToBase64(v3TokenObj);\n}\n\n/**\n * Helper function to encode a cashu token (defaults to v4 if keyset id allows it)\n * @param token\n * @param [opts]\n */\nexport function getEncodedToken(token: Token, opts?: { version: 3 | 4 }): string {\n\tconst nonHex = hasNonHexId(token.proofs);\n\tif (nonHex || opts?.version === 3) {\n\t\tif (opts?.version === 4) {\n\t\t\tthrow new Error('can not encode to v4 token if proofs contain non-hex keyset id');\n\t\t}\n\t\treturn getEncodedTokenV3(token);\n\t}\n\treturn getEncodedTokenV4(token);\n}\n\nexport function getEncodedTokenV4(token: Token): string {\n\t// Make sure each DLEQ has its blinding factor\n\ttoken.proofs.forEach((p) => {\n\t\tif (p.dleq && p.dleq.r == undefined) {\n\t\t\tthrow new Error('Missing blinding factor in included DLEQ proof');\n\t\t}\n\t});\n\tconst nonHex = hasNonHexId(token.proofs);\n\tif (nonHex) {\n\t\tthrow new Error('can not encode to v4 token if proofs contain non-hex keyset id');\n\t}\n\n\tconst tokenTemplate = templateFromToken(token);\n\n\tconst encodedData = encodeCBOR(tokenTemplate);\n\tconst prefix = 'cashu';\n\tconst version = 'B';\n\tconst base64Data = encodeUint8toBase64Url(encodedData);\n\treturn prefix + version + base64Data;\n}\n\nfunction templateFromToken(token: Token): TokenV4Template {\n\tconst idMap: { [id: string]: Array<Proof> } = {};\n\tconst mint = token.mint;\n\tfor (let i = 0; i < token.proofs.length; i++) {\n\t\tconst proof = token.proofs[i];\n\t\tif (idMap[proof.id]) {\n\t\t\tidMap[proof.id].push(proof);\n\t\t} else {\n\t\t\tidMap[proof.id] = [proof];\n\t\t}\n\t}\n\tconst tokenTemplate: TokenV4Template = {\n\t\tm: mint,\n\t\tu: token.unit || 'sat',\n\t\tt: Object.keys(idMap).map(\n\t\t\t(id: string): V4InnerToken => ({\n\t\t\t\ti: hexToBytes(id),\n\t\t\t\tp: idMap[id].map(\n\t\t\t\t\t(p: Proof): V4ProofTemplate => ({\n\t\t\t\t\t\ta: p.amount,\n\t\t\t\t\t\ts: p.secret,\n\t\t\t\t\t\tc: hexToBytes(p.C),\n\t\t\t\t\t\t...(p.dleq && {\n\t\t\t\t\t\t\td: {\n\t\t\t\t\t\t\t\te: hexToBytes(p.dleq.e),\n\t\t\t\t\t\t\t\ts: hexToBytes(p.dleq.s),\n\t\t\t\t\t\t\t\tr: hexToBytes(p.dleq.r ?? '00')\n\t\t\t\t\t\t\t} as V4DLEQTemplate\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t})\n\t\t)\n\t} as TokenV4Template;\n\tif (token.memo) {\n\t\ttokenTemplate.d = token.memo;\n\t}\n\treturn tokenTemplate;\n}\n\nfunction tokenFromTemplate(template: TokenV4Template): Token {\n\tconst proofs: Array<Proof> = [];\n\ttemplate.t.forEach((t) =>\n\t\tt.p.forEach((p) => {\n\t\t\tproofs.push({\n\t\t\t\tsecret: p.s,\n\t\t\t\tC: bytesToHex(p.c),\n\t\t\t\tamount: p.a,\n\t\t\t\tid: bytesToHex(t.i),\n\t\t\t\t...(p.d && {\n\t\t\t\t\tdleq: {\n\t\t\t\t\t\tr: bytesToHex(p.d.r),\n\t\t\t\t\t\ts: bytesToHex(p.d.s),\n\t\t\t\t\t\te: bytesToHex(p.d.e)\n\t\t\t\t\t} as SerializedDLEQ\n\t\t\t\t})\n\t\t\t});\n\t\t})\n\t);\n\tconst decodedToken: Token = { mint: template.m, proofs, unit: template.u || 'sat' };\n\tif (template.d) {\n\t\tdecodedToken.memo = template.d;\n\t}\n\treturn decodedToken;\n}\n\n/**\n * Helper function to decode cashu tokens into object\n * @param token an encoded cashu token (cashuAey...)\n * @returns cashu token object\n */\nexport function getDecodedToken(token: string) {\n\t// remove prefixes\n\tconst uriPrefixes = ['web+cashu://', 'cashu://', 'cashu:', 'cashu'];\n\turiPrefixes.forEach((prefix: string) => {\n\t\tif (!token.startsWith(prefix)) {\n\t\t\treturn;\n\t\t}\n\t\ttoken = token.slice(prefix.length);\n\t});\n\treturn handleTokens(token);\n}\n\n/**\n * Helper function to decode different versions of cashu tokens into an object\n * @param token an encoded cashu token (cashuAey...)\n * @returns cashu Token object\n */\nexport function handleTokens(token: string): Token {\n\tconst version = token.slice(0, 1);\n\tconst encodedToken = token.slice(1);\n\tif (version === 'A') {\n\t\tconst parsedV3Token = encodeBase64ToJson<DeprecatedToken>(encodedToken);\n\t\tif (parsedV3Token.token.length > 1) {\n\t\t\tthrow new Error('Multi entry token are not supported');\n\t\t}\n\t\tconst entry = parsedV3Token.token[0];\n\t\tconst tokenObj: Token = {\n\t\t\tmint: entry.mint,\n\t\t\tproofs: entry.proofs,\n\t\t\tunit: parsedV3Token.unit || 'sat'\n\t\t};\n\t\tif (parsedV3Token.memo) {\n\t\t\ttokenObj.memo = parsedV3Token.memo;\n\t\t}\n\t\treturn tokenObj;\n\t} else if (version === 'B') {\n\t\tconst uInt8Token = encodeBase64toUint8(encodedToken);\n\t\tconst tokenData = decodeCBOR(uInt8Token) as TokenV4Template;\n\t\tconst decodedToken = tokenFromTemplate(tokenData);\n\t\treturn decodedToken;\n\t}\n\tthrow new Error('Token version is not supported');\n}\n/**\n * Returns the keyset id of a set of keys\n * @param keys keys object to derive keyset id from\n * @returns\n */\nexport function deriveKeysetId(keys: Keys) {\n\tconst pubkeysConcat = Object.entries(keys)\n\t\t.sort((a: [string, string], b: [string, string]) => +a[0] - +b[0])\n\t\t.map(([, pubKey]: [unknown, string]) => hexToBytes(pubKey))\n\t\t.reduce((prev: Uint8Array, curr: Uint8Array) => mergeUInt8Arrays(prev, curr), new Uint8Array());\n\tconst hash = sha256(pubkeysConcat);\n\tconst hashHex = Buffer.from(hash).toString('hex').slice(0, 14);\n\treturn '00' + hashHex;\n}\n\nexport function mergeUInt8Arrays(a1: Uint8Array, a2: Uint8Array): Uint8Array {\n\t// sum of individual array lengths\n\tconst mergedArray = new Uint8Array(a1.length + a2.length);\n\tmergedArray.set(a1);\n\tmergedArray.set(a2, a1.length);\n\treturn mergedArray;\n}\n\nexport function sortProofsById(proofs: Array<Proof>) {\n\treturn proofs.sort((a: Proof, b: Proof) => a.id.localeCompare(b.id));\n}\n\nexport function isObj(v: unknown): v is object {\n\treturn typeof v === 'object';\n}\n\nexport function checkResponse(data: { error?: string; detail?: string }) {\n\tif (!isObj(data)) return;\n\tif ('error' in data && data.error) {\n\t\tthrow new Error(data.error);\n\t}\n\tif ('detail' in data && data.detail) {\n\t\tthrow new Error(data.detail);\n\t}\n}\n\nexport function joinUrls(...parts: Array<string>): string {\n\treturn parts.map((part: string) => part.replace(/(^\\/+|\\/+$)/g, '')).join('/');\n}\n\nexport function sanitizeUrl(url: string): string {\n\treturn url.replace(/\\/$/, '');\n}\n\nexport function sumProofs(proofs: Array<Proof>) {\n\treturn proofs.reduce((acc: number, proof: Proof) => acc + proof.amount, 0);\n}\n\nexport function decodePaymentRequest(paymentRequest: string) {\n\treturn PaymentRequest.fromEncodedRequest(paymentRequest);\n}\n\nexport class MessageNode {\n\tprivate _value: string;\n\tprivate _next: MessageNode | null;\n\n\tpublic get value(): string {\n\t\treturn this._value;\n\t}\n\tpublic set value(message: string) {\n\t\tthis._value = message;\n\t}\n\tpublic get next(): MessageNode | null {\n\t\treturn this._next;\n\t}\n\tpublic set next(node: MessageNode | null) {\n\t\tthis._next = node;\n\t}\n\n\tconstructor(message: string) {\n\t\tthis._value = message;\n\t\tthis._next = null;\n\t}\n}\n\nexport class MessageQueue {\n\tprivate _first: MessageNode | null;\n\tprivate _last: MessageNode | null;\n\n\tpublic get first(): MessageNode | null {\n\t\treturn this._first;\n\t}\n\tpublic set first(messageNode: MessageNode | null) {\n\t\tthis._first = messageNode;\n\t}\n\tpublic get last(): MessageNode | null {\n\t\treturn this._last;\n\t}\n\tpublic set last(messageNode: MessageNode | null) {\n\t\tthis._last = messageNode;\n\t}\n\tprivate _size: number;\n\tpublic get size(): number {\n\t\treturn this._size;\n\t}\n\tpublic set size(v: number) {\n\t\tthis._size = v;\n\t}\n\n\tconstructor() {\n\t\tthis._first = null;\n\t\tthis._last = null;\n\t\tthis._size = 0;\n\t}\n\tenqueue(message: string): boolean {\n\t\tconst newNode = new MessageNode(message);\n\t\tif (this._size === 0 || !this._last) {\n\t\t\tthis._first = newNode;\n\t\t\tthis._last = newNode;\n\t\t} else {\n\t\t\tthis._last.next = newNode;\n\t\t\tthis._last = newNode;\n\t\t}\n\t\tthis._size++;\n\t\treturn true;\n\t}\n\tdequeue(): string | null {\n\t\tif (this._size === 0 || !this._first) return null;\n\n\t\tconst prev = this._first;\n\t\tthis._first = prev.next;\n\t\tprev.next = null;\n\n\t\tthis._size--;\n\t\treturn prev.value;\n\t}\n}\n/**\n * Removes all traces of DLEQs from a list of proofs\n * @param proofs The list of proofs that dleq should be stripped from\n */\nexport function stripDleq(proofs: Array<Proof>): Array<Omit<Proof, 'dleq' | 'dleqValid'>> {\n\treturn proofs.map((p) => {\n\t\tconst newP = { ...p };\n\t\tdelete newP['dleq'];\n\t\tdelete newP['dleqValid'];\n\t\treturn newP;\n\t});\n}\n\n/**\n * Checks that the proof has a valid DLEQ proof according to\n * keyset `keys`\n * @param proof The proof subject to verification\n * @param keyset The Mint's keyset to be used for verification\n * @returns true if verification succeeded, false otherwise\n * @throws Error if @param proof does not match any key in @param keyset\n */\nexport function hasValidDleq(proof: Proof, keyset: MintKeys): boolean {\n\tif (proof.dleq == undefined) {\n\t\treturn false;\n\t}\n\tconst dleq = {\n\t\te: hexToBytes(proof.dleq.e),\n\t\ts: hexToBytes(proof.dleq.s),\n\t\tr: hexToNumber(proof.dleq.r ?? '00')\n\t} as DLEQ;\n\tif (!hasCorrespondingKey(proof.amount, keyset.keys)) {\n\t\tthrow new Error(`undefined key for amount ${proof.amount}`);\n\t}\n\tconst key = keyset.keys[proof.amount];\n\tif (\n\t\t!verifyDLEQProof_reblind(\n\t\t\tnew TextEncoder().encode(proof.secret),\n\t\t\tdleq,\n\t\t\tpointFromHex(proof.C),\n\t\t\tpointFromHex(key)\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nfunction concatByteArrays(...arrays: Array<Uint8Array>): Uint8Array {\n\tconst totalLength = arrays.reduce((a, c) => a + c.length, 0);\n\tconst byteArray = new Uint8Array(totalLength);\n\tlet pointer = 0;\n\tfor (let i = 0; i < arrays.length; i++) {\n\t\tbyteArray.set(arrays[i], pointer);\n\t\tpointer = pointer + arrays[i].length;\n\t}\n\treturn byteArray;\n}\n\nexport function getEncodedTokenBinary(token: Token): Uint8Array {\n\tconst utf8Encoder = new TextEncoder();\n\tconst template = templateFromToken(token);\n\tconst binaryTemplate = encodeCBOR(template);\n\tconst prefix = utf8Encoder.encode('craw');\n\tconst version = utf8Encoder.encode('B');\n\treturn concatByteArrays(prefix, version, binaryTemplate);\n}\n\nexport function getDecodedTokenBinary(bytes: Uint8Array): Token {\n\tconst utfDecoder = new TextDecoder();\n\tconst prefix = utfDecoder.decode(bytes.slice(0, 4));\n\tconst version = utfDecoder.decode(new Uint8Array([bytes[4]]));\n\tif (prefix !== 'craw' || version !== 'B') {\n\t\tthrow new Error('not a valid binary token');\n\t}\n\tconst binaryToken = bytes.slice(5);\n\tconst decoded = decodeCBOR(binaryToken) as TokenV4Template;\n\treturn tokenFromTemplate(decoded);\n}\n\nfunction sumArray(arr: Array<number>) {\n\treturn arr.reduce((a, c) => a + c, 0);\n}\n","let _WS: typeof WebSocket;\n\nif (typeof WebSocket !== 'undefined') {\n\t_WS = WebSocket;\n}\n\nexport function injectWebSocketImpl(ws: any) {\n\t_WS = ws;\n}\n\nexport function getWebSocketImpl() {\n\treturn _WS;\n}\n","import { MessageQueue } from './utils';\nimport {\n\tJsonRpcErrorObject,\n\tJsonRpcMessage,\n\tJsonRpcNotification,\n\tJsonRpcReqParams,\n\tRpcSubId\n} from './model/types';\nimport { OnOpenError, OnOpenSuccess } from './model/types/wallet/websocket';\nimport { getWebSocketImpl } from './ws';\n\nexport class ConnectionManager {\n\tstatic instace: ConnectionManager;\n\tprivate connectionMap: Map<string, WSConnection> = new Map();\n\n\tstatic getInstance() {\n\t\tif (!ConnectionManager.instace) {\n\t\t\tConnectionManager.instace = new ConnectionManager();\n\t\t}\n\t\treturn ConnectionManager.instace;\n\t}\n\n\tgetConnection(url: string): WSConnection {\n\t\tif (this.connectionMap.has(url)) {\n\t\t\treturn this.connectionMap.get(url) as WSConnection;\n\t\t}\n\t\tconst newConn = new WSConnection(url);\n\t\tthis.connectionMap.set(url, newConn);\n\t\treturn newConn;\n\t}\n}\n\nexport class WSConnection {\n\tpublic readonly url: URL;\n\tprivate readonly _WS: typeof WebSocket;\n\tprivate ws: WebSocket | undefined;\n\tprivate connectionPromise: Promise<void> | undefined;\n\tprivate subListeners: { [subId: string]: Array<(payload: any) => any> } = {};\n\tprivate rpcListeners: { [rpcSubId: string]: any } = {};\n\tprivate messageQueue: MessageQueue;\n\tprivate handlingInterval?: number;\n\tprivate rpcId = 0;\n\n\tconstructor(url: string) {\n\t\tthis._WS = getWebSocketImpl();\n\t\tthis.url = new URL(url);\n\t\tthis.messageQueue = new MessageQueue();\n\t}\n\n\tconnect() {\n\t\tif (!this.connectionPromise) {\n\t\t\tthis.connectionPromise = new Promise((res: OnOpenSuccess, rej: OnOpenError) => {\n\t\t\t\ttry {\n\t\t\t\t\tthis.ws = new this._WS(this.url);\n\t\t\t\t} catch (err) {\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.ws.onopen = () => {\n\t\t\t\t\tres();\n\t\t\t\t};\n\t\t\t\tthis.ws.onerror = () => {\n\t\t\t\t\trej(new Error('Failed to open WebSocket'));\n\t\t\t\t};\n\t\t\t\tthis.ws.onmessage = (e: MessageEvent) => {\n\t\t\t\t\tthis.messageQueue.enqueue(e.data);\n\t\t\t\t\tif (!this.handlingInterval) {\n\t\t\t\t\t\tthis.handlingInterval = setInterval(\n\t\t\t\t\t\t\tthis.handleNextMesage.bind(this),\n\t\t\t\t\t\t\t0\n\t\t\t\t\t\t) as unknown as number;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis.ws.onclose = () => {\n\t\t\t\t\tthis.connectionPromise = undefined;\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t\treturn this.connectionPromise;\n\t}\n\n\tsendRequest(method: 'subscribe', params: JsonRpcReqParams): void;\n\tsendRequest(method: 'unsubscribe', params: { subId: string }): void;\n\tsendRequest(method: 'subscribe' | 'unsubscribe', params: Partial<JsonRpcReqParams>) {\n\t\tif (this.ws?.readyState !== 1) {\n\t\t\tthrow new Error('Socket not open...');\n\t\t}\n\t\tconst id = this.rpcId;\n\t\tthis.rpcId++;\n\t\tconst message = JSON.stringify({ jsonrpc: '2.0', method, params, id });\n\t\tthis.ws?.send(message);\n\t}\n\n\tcloseSubscription(subId: string) {\n\t\tthis.ws?.send(JSON.stringify(['CLOSE', subId]));\n\t}\n\n\taddSubListener(subId: string, callback: (payload: any) => any) {\n\t\t(this.subListeners[subId] = this.subListeners[subId] || []).push(callback);\n\t}\n\n\t//TODO: Move to RPCManagerClass\n\tprivate addRpcListener(\n\t\tcallback: () => any,\n\t\terrorCallback: (e: JsonRpcErrorObject) => any,\n\t\tid: Exclude<RpcSubId, null>\n\t) {\n\t\tthis.rpcListeners[id] = { callback, errorCallback };\n\t}\n\n\t//TODO: Move to RPCManagerClass\n\tprivate removeRpcListener(id: Exclude<RpcSubId, null>) {\n\t\tdelete this.rpcListeners[id];\n\t}\n\n\tprivate removeListener(subId: string, callback: (payload: any) => any) {\n\t\tif (this.subListeners[subId].length === 1) {\n\t\t\tdelete this.subListeners[subId];\n\t\t\treturn;\n\t\t}\n\t\tthis.subListeners[subId] = this.subListeners[subId].filter((fn: any) => fn !== callback);\n\t}\n\n\tasync ensureConnection() {\n\t\tif (this.ws?.readyState !== 1) {\n\t\t\tawait this.connect();\n\t\t}\n\t}\n\n\tprivate handleNextMesage() {\n\t\tif (this.messageQueue.size === 0) {\n\t\t\tclearInterval(this.handlingInterval);\n\t\t\tthis.handlingInterval = undefined;\n\t\t\treturn;\n\t\t}\n\t\tconst message = this.messageQueue.dequeue() as string;\n\t\tlet parsed;\n\t\ttry {\n\t\t\tparsed = JSON.parse(message) as JsonRpcMessage;\n\t\t\tif ('result' in parsed && parsed.id != undefined) {\n\t\t\t\tif (this.rpcListeners[parsed.id]) {\n\t\t\t\t\tthis.rpcListeners[parsed.id].callback();\n\t\t\t\t\tthis.removeRpcListener(parsed.id);\n\t\t\t\t}\n\t\t\t} else if ('error' in parsed && parsed.id != undefined) {\n\t\t\t\tif (this.rpcListeners[parsed.id]) {\n\t\t\t\t\tthis.rpcListeners[parsed.id].errorCallback(parsed.error);\n\t\t\t\t\tthis.removeRpcListener(parsed.id);\n\t\t\t\t}\n\t\t\t} else if ('method' in parsed) {\n\t\t\t\tif ('id' in parsed) {\n\t\t\t\t\t// Do nothing as mints should not send requests\n\t\t\t\t} else {\n\t\t\t\t\tconst subId = parsed.params.subId;\n\t\t\t\t\tif (!subId) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.subListeners[subId]?.length > 0) {\n\t\t\t\t\t\tconst notification = parsed as JsonRpcNotification;\n\t\t\t\t\t\tthis.subListeners[subId].forEach((cb) => cb(notification.params.payload));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tcreateSubscription(\n\t\tparams: Omit<JsonRpcReqParams, 'subId'>,\n\t\tcallback: (payload: any) => any,\n\t\terrorCallback: (e: Error) => any\n\t) {\n\t\tif (this.ws?.readyState !== 1) {\n\t\t\treturn errorCallback(new Error('Socket is not open'));\n\t\t}\n\t\tconst subId = (Math.random() + 1).toString(36).substring(7);\n\t\tthis.addRpcListener(\n\t\t\t() => {\n\t\t\t\tthis.addSubListener(subId, callback);\n\t\t\t},\n\t\t\t(e: JsonRpcErrorObject) => {\n\t\t\t\terrorCallback(new Error(e.message));\n\t\t\t},\n\t\t\tthis.rpcId\n\t\t);\n\t\tthis.sendRequest('subscribe', { ...params, subId });\n\t\tthis.rpcId++;\n\t\treturn subId;\n\t}\n\n\tcancelSubscription(subId: string, callback: (payload: any) => any) {\n\t\tthis.removeListener(subId, callback);\n\t\tthis.rpcId++;\n\t\tthis.sendRequest('unsubscribe', { subId });\n\t}\n\n\tget activeSubscriptions() {\n\t\treturn Object.keys(this.subListeners);\n\t}\n\n\tclose() {\n\t\tif (this.ws) {\n\t\t\tthis.ws?.close();\n\t\t}\n\t}\n}\n","import { SerializedBlindedMessage } from '../wallet';\n\n/**\n * Cashu api error\n */\nexport type ApiError = {\n\t/**\n\t * Error message\n\t */\n\terror?: string;\n\t/**\n\t * HTTP error code\n\t */\n\tcode?: number;\n\t/**\n\t * Detailed error message\n\t */\n\tdetail?: string;\n};\n\n/**\n * Entries of CheckStateResponse with state of the proof\n */\nexport type ProofState = {\n\tY: string;\n\tstate: CheckStateEnum;\n\twitness: string | null;\n};\n\n/**\n * Enum for the state of a proof\n */\nexport enum CheckStateEnum {\n\tUNSPENT = 'UNSPENT',\n\tPENDING = 'PENDING',\n\tSPENT = 'SPENT'\n}\n\n/**\n * Response when checking proofs if they are spendable. Should not rely on this for receiving, since it can be easily cheated.\n */\nexport type CheckStateResponse = {\n\t/**\n\t *\n\t */\n\tstates: Array<ProofState>;\n} & ApiError;\n\n/**\n * Response from mint at /info endpoint\n */\nexport type GetInfoResponse = {\n\tname: string;\n\tpubkey: string;\n\tversion: string;\n\tdescription?: string;\n\tdescription_long?: string;\n\tcontact: Array<MintContactInfo>;\n\tnuts: {\n\t\t'4': {\n\t\t\t// Minting\n\t\t\tmethods: Array<SwapMethod>;\n\t\t\tdisabled: boolean;\n\t\t};\n\t\t'5': {\n\t\t\t// Melting\n\t\t\tmethods: Array<SwapMethod>;\n\t\t\tdisabled: boolean;\n\t\t};\n\t\t'7'?: {\n\t\t\t// Token state check\n\t\t\tsupported: boolean;\n\t\t};\n\t\t'8'?: {\n\t\t\t// Overpaid melt fees\n\t\t\tsupported: boolean;\n\t\t};\n\t\t'9'?: {\n\t\t\t// Restore\n\t\t\tsupported: boolean;\n\t\t};\n\t\t'10'?: {\n\t\t\t// Spending conditions\n\t\t\tsupported: boolean;\n\t\t};\n\t\t'11'?: {\n\t\t\t// P2PK\n\t\t\tsupported: boolean;\n\t\t};\n\t\t'12'?: {\n\t\t\t// DLEQ\n\t\t\tsupported: boolean;\n\t\t};\n\t\t'14'?: {\n\t\t\t// HTLCs\n\t\t\tsupported: boolean;\n\t\t};\n\t\t'15'?: {\n\t\t\t// MPP\n\t\t\tmethods: Array<MPPMethod>;\n\t\t};\n\t\t'17'?: {\n\t\t\t// WebSockets\n\t\t\tsupported: Array<WebSocketSupport>;\n\t\t};\n\t};\n\tmotd?: string;\n};\n\n/**\n * Response from the mint after requesting a melt quote\n */\nexport type MeltQuoteResponse = {\n\t/**\n\t * Quote ID\n\t */\n\tquote: string;\n\t/**\n\t * Amount to be melted\n\t */\n\tamount: number;\n\t/**\n\t * Fee reserve to be added to the amount\n\t */\n\tfee_reserve: number;\n\t/**\n\t * State of the melt quote\n\t */\n\tstate: MeltQuoteState;\n\t/**\n\t * Timestamp of when the quote expires\n\t */\n\texpiry: number;\n\t/**\n\t * preimage of the paid invoice. is null if it the invoice has not been paid yet. can be null, depending on which LN-backend the mint uses\n\t */\n\tpayment_preimage: string | null;\n\t/**\n\t * Return/Change from overpaid fees. This happens due to Lighting fee estimation being inaccurate\n\t */\n\tchange?: Array<SerializedBlindedSignature>;\n} & ApiError;\n\nexport enum MeltQuoteState {\n\tUNPAID = 'UNPAID',\n\tPENDING = 'PENDING',\n\tPAID = 'PAID'\n}\n\nexport type MintContactInfo = {\n\tmethod: string;\n\tinfo: string;\n};\n\nexport enum MintQuoteState {\n\tUNPAID = 'UNPAID',\n\tPAID = 'PAID',\n\tISSUED = 'ISSUED'\n}\n\n/**\n * Response from the mint after requesting a mint\n */\nexport type MintQuoteResponse = {\n\t/**\n\t * Payment request\n\t */\n\trequest: string;\n\t/**\n\t * Quote ID\n\t */\n\tquote: string;\n\t/**\n\t * State of the mint quote\n\t */\n\tstate: MintQuoteState;\n\t/**\n\t * Timestamp of when the quote expires\n\t */\n\texpiry: number;\n} & ApiError;\n\n/**\n * Response from the mint after requesting a mint\n */\nexport type MintResponse = {\n\tsignatures: Array<SerializedBlindedSignature>;\n} & ApiError;\n\n/**\n * Response from mint at /v1/restore endpoint\n */\nexport type PostRestoreResponse = {\n\toutputs: Array<SerializedBlindedMessage>;\n\tpromises: Array<SerializedBlindedSignature>;\n};\n\n/*\n * Zero-Knowledge that BlindedSignature\n * was generated using a specific public key\n */\nexport type SerializedDLEQ = {\n\ts: string;\n\te: string;\n\tr?: string;\n};\n\n/**\n * Blinded signature as it is received from the mint\n */\nexport type SerializedBlindedSignature = {\n\t/**\n\t * keyset id for indicating which public key was used to sign the blinded message\n\t */\n\tid: string;\n\t/**\n\t * Amount denominated in Satoshi\n\t */\n\tamount: number;\n\t/**\n\t * Blinded signature\n\t */\n\tC_: string;\n\t/**\n\t * DLEQ Proof\n\t */\n\tdleq?: SerializedDLEQ;\n};\n\n/**\n * Ecash to other MoE swap method, displayed in @type {GetInfoResponse}\n */\nexport type SwapMethod = {\n\tmethod: string;\n\tunit: string;\n\tmin_amount: number;\n\tmax_amount: number;\n};\n\n/**\n * Response from the mint after performing a split action\n */\nexport type SwapResponse = {\n\t/**\n\t * represents the outputs after the split\n\t */\n\tsignatures: Array<SerializedBlindedSignature>;\n} & ApiError;\n\n/**\n * MPP supported methods\n */\nexport type MPPMethod = {\n\tmethod: string;\n\tunit: string;\n};\n\n/**\n * WebSocket supported methods\n */\nexport type WebSocketSupport = {\n\tmethod: string;\n\tunit: string;\n\tcommands: Array<string>;\n};\n","import { Proof } from './index';\n\nexport type RawTransport = {\n\tt: PaymentRequestTransportType; // type\n\ta: string; // target\n\tg?: Array<Array<string>>; // tags\n};\n\nexport type RawPaymentRequest = {\n\ti?: string; // id\n\ta?: number; // amount\n\tu?: string; // unit\n\ts?: boolean; // single use\n\tm?: Array<string>; // mints\n\td?: string; // description\n\tt: Array<RawTransport>; // transports\n};\n\nexport type PaymentRequestTransport = {\n\ttype: PaymentRequestTransportType;\n\ttarget: string;\n\ttags?: Array<Array<string>>;\n};\n\nexport enum PaymentRequestTransportType {\n\tPOST = 'post',\n\tNOSTR = 'nostr'\n}\n\nexport type PaymentRequestPayload = {\n\tid?: string;\n\tmemo?: string;\n\tunit: string;\n\tmint: string;\n\tproofs: Array<Proof>;\n};\n","export class HttpResponseError extends Error {\n\tstatus: number;\n\tconstructor(message: string, status: number) {\n\t\tsuper(message);\n\t\tthis.status = status;\n\t}\n}\n","import { HttpResponseError } from './model/Errors';\n\ntype RequestArgs = {\n\tendpoint: string;\n\trequestBody?: Record<string, unknown>;\n\theaders?: Record<string, string>;\n};\n\ntype RequestOptions = RequestArgs & Omit<RequestInit, 'body' | 'headers'>;\n\nlet globalRequestOptions: Partial<RequestOptions> = {};\n\n/**\n * An object containing any custom settings that you want to apply to the global fetch method.\n * @param options See possible options here: https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\n */\nexport function setGlobalRequestOptions(options: Partial<RequestOptions>): void {\n\tglobalRequestOptions = options;\n}\n\nasync function _request({\n\tendpoint,\n\trequestBody,\n\theaders: requestHeaders,\n\t...options\n}: RequestOptions): Promise<unknown> {\n\tconst body = requestBody ? JSON.stringify(requestBody) : undefined;\n\tconst headers = {\n\t\t...{ Accept: 'application/json, text/plain, */*' },\n\t\t...(body ? { 'Content-Type': 'application/json' } : undefined),\n\t\t...requestHeaders\n\t};\n\n\tconst response = await fetch(endpoint, { body, headers, ...options });\n\n\tif (!response.ok) {\n\t\t// expecting: { error: '', code: 0 }\n\t\t// or: { detail: '' } (cashuBtc via pythonApi)\n\t\tconst { error, detail } = await response.json().catch(() => ({ error: 'bad response' }));\n\t\tthrow new HttpResponseError(error || detail || 'bad response', response.status);\n\t}\n\n\ttry {\n\t\treturn await response.json();\n\t} catch (err) {\n\t\tconsole.error('Failed to parse HTTP response', err);\n\t\tthrow new HttpResponseError('bad response', response.status);\n\t}\n}\n\nexport default async function request<T>(options: RequestOptions): Promise<T> {\n\tconst data = await _request({ ...options, ...globalRequestOptions });\n\treturn data as T;\n}\n","import type { MeltQuoteResponse } from '../model/types/index.js';\nimport { MeltQuoteState } from '../model/types/index.js';\n\nexport type MeltQuoteResponsePaidDeprecated = {\n\tpaid?: boolean;\n};\n\nexport function handleMeltQuoteResponseDeprecated(\n\tresponse: MeltQuoteResponse & MeltQuoteResponsePaidDeprecated\n): MeltQuoteResponse {\n\t// if the response MeltQuoteResponse has a \"paid\" flag, we monkey patch it to the state enum\n\tif (!response.state) {\n\t\tconsole.warn(\n\t\t\t\"Field 'state' not found in MeltQuoteResponse. Update NUT-05 of mint: https://github.com/cashubtc/nuts/pull/136)\"\n\t\t);\n\t\tif (typeof response.paid === 'boolean') {\n\t\t\tresponse.state = response.paid ? MeltQuoteState.PAID : MeltQuoteState.UNPAID;\n\t\t}\n\t}\n\treturn response;\n}\n","import type { MintQuoteResponse } from '../model/types/index.js';\nimport { MintQuoteState } from '../model/types/index.js';\n\nexport type MintQuoteResponsePaidDeprecated = {\n\tpaid?: boolean;\n};\n\nexport function handleMintQuoteResponseDeprecated(\n\tresponse: MintQuoteResponse & MintQuoteResponsePaidDeprecated\n): MintQuoteResponse {\n\t// if the response MeltQuoteResponse has a \"paid\" flag, we monkey patch it to the state enum\n\tif (!response.state) {\n\t\tconsole.warn(\n\t\t\t\"Field 'state' not found in MintQuoteResponse. Update NUT-04 of mint: https://github.com/cashubtc/nuts/pull/141)\"\n\t\t);\n\t\tif (typeof response.paid === 'boolean') {\n\t\t\tresponse.state = response.paid ? MintQuoteState.PAID : MintQuoteState.UNPAID;\n\t\t}\n\t}\n\treturn response;\n}\n","import type { MintContactInfo, GetInfoResponse } from '../model/types/index.js';\n\nexport function handleMintInfoContactFieldDeprecated(data: GetInfoResponse) {\n\t// Monkey patch old contact field [\"email\", \"me@mail.com\"] Array<[string, string]>; to new contact field [{method: \"email\", info: \"me@mail.com\"}] Array<MintContactInfo>\n\t// This is to maintain backwards compatibility with older versions of the mint\n\tif (Array.isArray(data?.contact) && data?.contact.length > 0) {\n\t\tdata.contact = data.contact.map((contact: MintContactInfo) => {\n\t\t\tif (\n\t\t\t\tArray.isArray(contact) &&\n\t\t\t\tcontact.length === 2 &&\n\t\t\t\ttypeof contact[0] === 'string' &&\n\t\t\t\ttypeof contact[1] === 'string'\n\t\t\t) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`Mint returned deprecated 'contact' field: Update NUT-06: https://github.com/cashubtc/nuts/pull/117`\n\t\t\t\t);\n\t\t\t\treturn { method: contact[0], info: contact[1] } as MintContactInfo;\n\t\t\t}\n\t\t\treturn contact;\n\t\t});\n\t}\n\treturn data;\n}\n","import { ConnectionManager, WSConnection } from './WSConnection.js';\nimport type {\n\tCheckStatePayload,\n\tCheckStateResponse,\n\tGetInfoResponse,\n\tMeltPayload,\n\tMintActiveKeys,\n\tMintAllKeysets,\n\tPostRestoreResponse,\n\tMintQuoteResponse,\n\tSerializedBlindedMessage,\n\tSwapPayload,\n\tSwapResponse,\n\tMintQuotePayload,\n\tMintPayload,\n\tMintResponse,\n\tPostRestorePayload,\n\tMeltQuotePayload,\n\tMeltQuoteResponse\n} from './model/types/index.js';\nimport { MeltQuoteState } from './model/types/index.js';\nimport request from './request.js';\nimport { isObj, joinUrls, sanitizeUrl } from './utils.js';\nimport {\n\tMeltQuoteResponsePaidDeprecated,\n\thandleMeltQuoteResponseDeprecated\n} from './legacy/nut-05.js';\nimport {\n\tMintQuoteResponsePaidDeprecated,\n\thandleMintQuoteResponseDeprecated\n} from './legacy/nut-04.js';\nimport { handleMintInfoContactFieldDeprecated } from './legacy/nut-06.js';\n/**\n * Class represents Cashu Mint API. This class contains Lower level functions that are implemented by CashuWallet.\n */\nclass CashuMint {\n\tprivate ws?: WSConnection;\n\t/**\n\t * @param _mintUrl requires mint URL to create this object\n\t * @param _customRequest if passed, use custom request implementation for network communication with the mint\n\t */\n\tconstructor(private _mintUrl: string, private _customRequest?: typeof request) {\n\t\tthis._mintUrl = sanitizeUrl(_mintUrl);\n\t\tthis._customRequest = _customRequest;\n\t}\n\n\tget mintUrl() {\n\t\treturn this._mintUrl;\n\t}\n\n\t/**\n\t * fetches mints info at the /info endpoint\n\t * @param mintUrl\n\t * @param customRequest\n\t */\n\tpublic static async getInfo(\n\t\tmintUrl: string,\n\t\tcustomRequest?: typeof request\n\t): Promise<GetInfoResponse> {\n\t\tconst requestInstance = customRequest || request;\n\t\tconst response = await requestInstance<GetInfoResponse>({\n\t\t\tendpoint: joinUrls(mintUrl, '/v1/info')\n\t\t});\n\t\tconst data = handleMintInfoContactFieldDeprecated(response);\n\t\treturn data;\n\t}\n\t/**\n\t * fetches mints info at the /info endpoint\n\t */\n\tasync getInfo(): Promise<GetInfoResponse> {\n\t\treturn CashuMint.getInfo(this._mintUrl, this._customRequest);\n\t}\n\n\t/**\n\t * Performs a swap operation with ecash inputs and outputs.\n\t * @param mintUrl\n\t * @param swapPayload payload containing inputs and outputs\n\t * @param customRequest\n\t * @returns signed outputs\n\t */\n\tpublic static async swap(\n\t\tmintUrl: string,\n\t\tswapPayload: SwapPayload,\n\t\tcustomRequest?: typeof request\n\t): Promise<SwapResponse> {\n\t\tconst requestInstance = customRequest || request;\n\t\tconst data = await requestInstance<SwapResponse>({\n\t\t\tendpoint: joinUrls(mintUrl, '/v1/swap'),\n\t\t\tmethod: 'POST',\n\t\t\trequestBody: swapPayload\n\t\t});\n\n\t\tif (!isObj(data) || !Array.isArray(data?.signatures)) {\n\t\t\tthrow new Error(data.detail ?? 'bad response');\n\t\t}\n\n\t\treturn data;\n\t}\n\t/**\n\t * Performs a swap operation with ecash inputs and outputs.\n\t * @param swapPayload payload containing inputs and outputs\n\t * @returns signed outputs\n\t */\n\tasync swap(swapPayload: SwapPayload): Promise<SwapResponse> {\n\t\treturn CashuMint.swap(this._mintUrl, swapPayload, this._customRequest);\n\t}\n\n\t/**\n\t * Requests a new mint quote from the mint.\n\t * @param mintUrl\n\t * @param mintQuotePayload Payload for creating a new mint quote\n\t * @param customRequest\n\t * @returns the mint will create and return a new mint quote containing a payment request for the specified amount and unit\n\t */\n\tpublic static async createMintQuote(\n\t\tmintUrl: string,\n\t\tmintQuotePayload: MintQuotePayload,\n\t\tcustomRequest?: typeof request\n\t): Promise<MintQuoteResponse> {\n\t\tconst requestInstance = customRequest || request;\n\t\tconst response = await requestInstance<MintQuoteResponse & MintQuoteResponsePaidDeprecated>({\n\t\t\tendpoint: joinUrls(mintUrl, '/v1/mint/quote/bolt11'),\n\t\t\tmethod: 'POST',\n\t\t\trequestBody: mintQuotePayload\n\t\t});\n\t\tconst data = handleMintQuoteResponseDeprecated(response);\n\t\treturn data;\n\t}\n\t/**\n\t * Requests a new mint quote from the mint.\n\t * @param mintQuotePayload Payload for creating a new mint quote\n\t * @returns the mint will create and return a new mint quote containing a payment request for the specified amount and unit\n\t */\n\tasync createMintQuote(mintQuotePayload: MintQuotePayload): Promise<MintQuoteResponse> {\n\t\treturn CashuMint.createMintQuote(this._mintUrl, mintQuotePayload, this._customRequest);\n\t}\n\n\t/**\n\t * Gets an existing mint quote from the mint.\n\t * @param mintUrl\n\t * @param quote Quote ID\n\t * @param customRequest\n\t * @returns the mint will create and return a Lightning invoice for the specified amount\n\t */\n\tpublic static async checkMintQuote(\n\t\tmintUrl: string,\n\t\tquote: string,\n\t\tcustomRequest?: typeof request\n\t): Promise<MintQuoteResponse> {\n\t\tconst requestInstance = customRequest || request;\n\t\tconst response = await requestInstance<MintQuoteResponse & MintQuoteResponsePaidDeprecated>({\n\t\t\tendpoint: joinUrls(mintUrl, '/v1/mint/quote/bolt11', quote),\n\t\t\tmethod: 'GET'\n\t\t});\n\n\t\tconst data = handleMintQuoteResponseDeprecated(response);\n\t\treturn data;\n\t}\n\t/**\n\t * Gets an existing mint quote from the mint.\n\t * @param quote Quote ID\n\t * @returns the mint will create and return a Lightning invoice for the specified amount\n\t */\n\tasync checkMintQuote(quote: string): Promise<MintQuoteResponse> {\n\t\treturn CashuMint.checkMintQuote(this._mintUrl, quote, this._customRequest);\n\t}\n\n\t/**\n\t * Mints new tokens by requesting blind signatures on the provided outputs.\n\t * @param mintUrl\n\t * @param mintPayload Payload containing the outputs to get blind signatures on\n\t * @param customRequest\n\t * @returns serialized blinded signatures\n\t */\n\tpublic static async mint(\n\t\tmintUrl: string,\n\t\tmintPayload: MintPayload,\n\t\tcustomRequest?: typeof request\n\t) {\n\t\tconst requestInstance = customRequest || request;\n\t\tconst data = await requestInstance<MintResponse>({\n\t\t\tendpoint: joinUrls(mintUrl, '/v1/mint/bolt11'),\n\t\t\tmethod: 'POST',\n\t\t\trequestBody: mintPayload\n\t\t});\n\n\t\tif (!isObj(data) || !Array.isArray(data?.signatures)) {\n\t\t\tthrow new Error('bad response');\n\t\t}\n\n\t\treturn data;\n\t}\n\t/**\n\t * Mints new tokens by requesting blind signatures on the provided outputs.\n\t * @param mintPayload Payload containing the outputs to get blind signatures on\n\t * @returns serialized blinded signatures\n\t */\n\tasync mint(mintPayload: MintPayload) {\n\t\treturn CashuMint.mint(this._mintUrl, mintPayload, this._customRequest);\n\t}\n\n\t/**\n\t * Requests a new melt quote from the mint.\n\t * @param mintUrl\n\t * @param MeltQuotePayload\n\t * @returns\n\t */\n\tpublic static async createMeltQuote(\n\t\tmintUrl: string,\n\t\tmeltQuotePayload: MeltQuotePayload,\n\t\tcustomRequest?: typeof request\n\t): Promise<MeltQuoteResponse> {\n\t\tconst requestInstance = customRequest || request;\n\t\tconst response = await requestInstance<MeltQuoteResponse & MeltQuoteResponsePaidDeprecated>({\n\t\t\tendpoint: joinUrls(mintUrl, '/v1/melt/quote/bolt11'),\n\t\t\tmethod: 'POST',\n\t\t\trequestBody: meltQuotePayload\n\t\t});\n\n\t\tconst data = handleMeltQuoteResponseDeprecated(response);\n\n\t\tif (\n\t\t\t!isObj(data) ||\n\t\t\ttypeof data?.amount !== 'number' ||\n\t\t\ttypeof data?.fee_reserve !== 'number' ||\n\t\t\ttypeof data?.quote !== 'string'\n\t\t) {\n\t\t\tthrow new Error('bad response');\n\t\t}\n\t\treturn data;\n\t}\n\t/**\n\t * Requests a new melt quote from the mint.\n\t * @param MeltQuotePayload\n\t * @returns\n\t */\n\tasync createMeltQuote(meltQuotePayload: MeltQuotePayload): Promise<MeltQuoteResponse> {\n\t\treturn CashuMint.createMeltQuote(this._mintUrl, meltQuotePayload, this._customRequest);\n\t}\n\n\t/**\n\t * Gets an existing melt quote.\n\t * @param mintUrl\n\t * @param quote Quote ID\n\t * @returns\n\t */\n\tpublic static async checkMeltQuote(\n\t\tmintUrl: string,\n\t\tquote: string,\n\t\tcustomRequest?: typeof request\n\t): Promise<MeltQuoteResponse> {\n\t\tconst requestInstance = customRequest || request;\n\t\tconst response = await requestInstance<MeltQuoteResponse & MeltQuoteResponsePaidDeprecated>({\n\t\t\tendpoint: joinUrls(mintUrl, '/v1/melt/quote/bolt11', quote),\n\t\t\tmethod: 'GET'\n\t\t});\n\n\t\tconst data = handleMeltQuoteResponseDeprecated(response);\n\n\t\tif (\n\t\t\t!isObj(data) ||\n\t\t\ttypeof data?.amount !== 'number' ||\n\t\t\ttypeof data?.fee_reserve !== 'number' ||\n\t\t\ttypeof data?.quote !== 'string' ||\n\t\t\ttypeof data?.state !== 'string' ||\n\t\t\t!Object.values(MeltQuoteState).includes(data.state)\n\t\t) {\n\t\t\tthrow new Error('bad response');\n\t\t}\n\n\t\treturn data;\n\t}\n\t/**\n\t * Gets an existing melt quote.\n\t * @param quote Quote ID\n\t * @returns\n\t */\n\tasync checkMeltQuote(quote: string): Promise<MeltQuoteResponse> {\n\t\treturn CashuMint.checkMeltQuote(this._mintUrl, quote, this._customRequest);\n\t}\n\n\t/**\n\t * Requests the mint to pay for a Bolt11 payment request by providing ecash as inputs to be spent. The inputs contain the amount and the fee_reserves for a Lightning payment. The payload can also contain blank outputs in order to receive back overpaid Lightning fees.\n\t * @param mintUrl\n\t * @param meltPayload\n\t * @param customRequest\n\t * @returns\n\t */\n\tpublic static async melt(\n\t\tmintUrl: string,\n\t\tmeltPayload: MeltPayload,\n\t\tcustomRequest?: typeof request\n\t): Promise<MeltQuoteResponse> {\n\t\tconst requestInstance = customRequest || request;\n\t\tconst response = await requestInstance<MeltQuoteResponse & MeltQuoteResponsePaidDeprecated>({\n\t\t\tendpoint: joinUrls(mintUrl, '/v1/melt/bolt11'),\n\t\t\tmethod: 'POST',\n\t\t\trequestBody: meltPayload\n\t\t});\n\n\t\tconst data = handleMeltQuoteResponseDeprecated(response);\n\n\t\tif (\n\t\t\t!isObj(data) ||\n\t\t\ttypeof data?.state !== 'string' ||\n\t\t\t!Object.values(MeltQuoteState).includes(data.state)\n\t\t) {\n\t\t\tthrow new Error('bad response');\n\t\t}\n\n\t\treturn data;\n\t}\n\t/**\n\t * Ask mint to perform a melt operation. This pays a lightning invoice and destroys tokens matching its amount + fees\n\t * @param meltPayload\n\t * @returns\n\t */\n\tasync melt(meltPayload: MeltPayload): Promise<MeltQuoteResponse> {\n\t\treturn CashuMint.melt(this._mintUrl, meltPayload, this._customRequest);\n\t}\n\t/**\n\t * Checks if specific proofs have already been redeemed\n\t * @param mintUrl\n\t * @param checkPayload\n\t * @param customRequest\n\t * @returns redeemed and unredeemed ordered list of booleans\n\t */\n\tpublic static async check(\n\t\tmintUrl: string,\n\t\tcheckPayload: CheckStatePayload,\n\t\tcustomRequest?: typeof request\n\t): Promise<CheckStateResponse> {\n\t\tconst requestInstance = customRequest || request;\n\t\tconst data = await requestInstance<CheckStateResponse>({\n\t\t\tendpoint: joinUrls(mintUrl, '/v1/checkstate'),\n\t\t\tmethod: 'POST',\n\t\t\trequestBody: checkPayload\n\t\t});\n\n\t\tif (!isObj(data) || !Array.isArray(data?.states)) {\n\t\t\tthrow new Error('bad response');\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * Get the mints public keys\n\t * @param mintUrl\n\t * @param keysetId optional param to get the keys for a specific keyset. If not specified, the keys from all active keysets are fetched\n\t * @param customRequest\n\t * @returns\n\t */\n\tpublic static async getKeys(\n\t\tmintUrl: string,\n\t\tkeysetId?: string,\n\t\tcustomRequest?: typeof request\n\t): Promise<MintActiveKeys> {\n\t\t// backwards compatibility for base64 encoded keyset ids\n\t\tif (keysetId) {\n\t\t\t// make the keysetId url safe\n\t\t\tkeysetId = keysetId.replace(/\\//g, '_').replace(/\\+/g, '-');\n\t\t}\n\t\tconst requestInstance = customRequest || request;\n\t\tconst data = await requestInstance<MintActiveKeys>({\n\t\t\tendpoint: keysetId ? joinUrls(mintUrl, '/v1/keys', keysetId) : joinUrls(mintUrl, '/v1/keys')\n\t\t});\n\n\t\tif (!isObj(data) || !Array.isArray(data.keysets)) {\n\t\t\tthrow new Error('bad response');\n\t\t}\n\n\t\treturn data;\n\t}\n\t/**\n\t * Get the mints public keys\n\t * @param keysetId optional param to get the keys for a specific keyset. If not specified, the keys from all active keysets are fetched\n\t * @returns the mints public keys\n\t */\n\tasync getKeys(keysetId?: string, mintUrl?: string): Promise<MintActiveKeys> {\n\t\tconst allKeys = await CashuMint.getKeys(\n\t\t\tmintUrl || this._mintUrl,\n\t\t\tkeysetId,\n\t\t\tthis._customRequest\n\t\t);\n\t\treturn allKeys;\n\t}\n\t/**\n\t * Get the mints keysets in no specific order\n\t * @param mintUrl\n\t * @param customRequest\n\t * @returns all the mints past and current keysets.\n\t */\n\tpublic static async getKeySets(\n\t\tmintUrl: string,\n\t\tcustomRequest?: typeof request\n\t): Promise<MintAllKeysets> {\n\t\tconst requestInstance = customRequest || request;\n\t\treturn requestInstance<MintAllKeysets>({ endpoint: joinUrls(mintUrl, '/v1/keysets') });\n\t}\n\n\t/**\n\t * Get the mints keysets in no specific order\n\t * @returns all the mints past and current keysets.\n\t */\n\tasync getKeySets(): Promise<MintAllKeysets> {\n\t\treturn CashuMint.getKeySets(this._mintUrl, this._customRequest);\n\t}\n\n\t/**\n\t * Checks if specific proofs have already been redeemed\n\t * @param checkPayload\n\t * @returns redeemed and unredeemed ordered list of booleans\n\t */\n\tasync check(checkPayload: CheckStatePayload): Promise<CheckStateResponse> {\n\t\treturn CashuMint.check(this._mintUrl, checkPayload, this._customRequest);\n\t}\n\n\tpublic static async restore(\n\t\tmintUrl: string,\n\t\trestorePayload: PostRestorePayload,\n\t\tcustomRequest?: typeof request\n\t): Promise<PostRestoreResponse> {\n\t\tconst requestInstance = customRequest || request;\n\t\tconst data = await requestInstance<PostRestoreResponse>({\n\t\t\tendpoint: joinUrls(mintUrl, '/v1/restore'),\n\t\t\tmethod: 'POST',\n\t\t\trequestBody: restorePayload\n\t\t});\n\n\t\tif (!isObj(data) || !Array.isArray(data?.outputs) || !Array.isArray(data?.promises)) {\n\t\t\tthrow new Error('bad response');\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tasync restore(restorePayload: {\n\t\toutputs: Array<SerializedBlindedMessage>;\n\t}): Promise<PostRestoreResponse> {\n\t\treturn CashuMint.restore(this._mintUrl, restorePayload, this._customRequest);\n\t}\n\n\t/**\n\t * Tries to establish a websocket connection with the websocket mint url according to NUT-17\n\t */\n\tasync connectWebSocket() {\n\t\tif (this.ws) {\n\t\t\tawait this.ws.ensureConnection();\n\t\t} else {\n\t\t\tconst mintUrl = new URL(this._mintUrl);\n\t\t\tconst wsSegment = 'v1/ws';\n\t\t\tif (mintUrl.pathname) {\n\t\t\t\tif (mintUrl.pathname.endsWith('/')) {\n\t\t\t\t\tmintUrl.pathname += wsSegment;\n\t\t\t\t} else {\n\t\t\t\t\tmintUrl.pathname += '/' + wsSegment;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.ws = ConnectionManager.getInstance().getConnection(\n\t\t\t\t`${mintUrl.protocol === 'https:' ? 'wss' : 'ws'}://${mintUrl.host}${mintUrl.pathname}`\n\t\t\t);\n\t\t\ttry {\n\t\t\t\tawait this.ws.connect();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t\tthrow new Error('Failed to connect to WebSocket...');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Closes a websocket connection\n\t */\n\tdisconnectWebSocket() {\n\t\tif (this.ws) {\n\t\t\tthis.ws.close();\n\t\t}\n\t}\n\n\tget webSocketConnection() {\n\t\treturn this.ws;\n\t}\n}\n\nexport { CashuMint };\n","import { GetInfoResponse, MPPMethod, SwapMethod, WebSocketSupport } from './types';\n\nexport class MintInfo {\n\tprivate readonly _mintInfo: GetInfoResponse;\n\n\tconstructor(info: GetInfoResponse) {\n\t\tthis._mintInfo = info;\n\t}\n\n\tisSupported(num: 4 | 5): { disabled: boolean; params: Array<SwapMethod> };\n\tisSupported(num: 7 | 8 | 9 | 10 | 11 | 12 | 14): { supported: boolean };\n\tisSupported(num: 17): { supported: boolean; params?: Array<WebSocketSupport> };\n\tisSupported(num: 15): { supported: boolean; params?: Array<MPPMethod> };\n\tisSupported(num: number) {\n\t\tswitch (num) {\n\t\t\tcase 4:\n\t\t\tcase 5: {\n\t\t\t\treturn this.checkMintMelt(num);\n\t\t\t}\n\t\t\tcase 7:\n\t\t\tcase 8:\n\t\t\tcase 9:\n\t\t\tcase 10:\n\t\t\tcase 11:\n\t\t\tcase 12:\n\t\t\tcase 14: {\n\t\t\t\treturn this.checkGenericNut(num);\n\t\t\t}\n\t\t\tcase 17: {\n\t\t\t\treturn this.checkNut17();\n\t\t\t}\n\t\t\tcase 15: {\n\t\t\t\treturn this.checkNut15();\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthrow new Error('nut is not supported by cashu-ts');\n\t\t\t}\n\t\t}\n\t}\n\tprivate checkGenericNut(num: 7 | 8 | 9 | 10 | 11 | 12 | 14) {\n\t\tif (this._mintInfo.nuts[num]?.supported) {\n\t\t\treturn { supported: true };\n\t\t}\n\t\treturn { supported: false };\n\t}\n\tprivate checkMintMelt(num: 4 | 5) {\n\t\tconst mintMeltInfo = this._mintInfo.nuts[num];\n\t\tif (mintMeltInfo && mintMeltInfo.methods.length > 0 && !mintMeltInfo.disabled) {\n\t\t\treturn { disabled: false, params: mintMeltInfo.methods };\n\t\t}\n\t\treturn { disabled: true, params: mintMeltInfo.methods };\n\t}\n\tprivate checkNut17() {\n\t\tif (this._mintInfo.nuts[17] && this._mintInfo.nuts[17].supported.length > 0) {\n\t\t\treturn { supported: true, params: this._mintInfo.nuts[17].supported };\n\t\t}\n\t\treturn { supported: false };\n\t}\n\tprivate checkNut15() {\n\t\tif (this._mintInfo.nuts[15] && this._mintInfo.nuts[15].methods.length > 0) {\n\t\t\treturn { supported: true, params: this._mintInfo.nuts[15].methods };\n\t\t}\n\t\treturn { supported: false };\n\t}\n\n\tget contact() {\n\t\treturn this._mintInfo.contact;\n\t}\n\n\tget description() {\n\t\treturn this._mintInfo.description;\n\t}\n\n\tget description_long() {\n\t\treturn this._mintInfo.description_long;\n\t}\n\n\tget name() {\n\t\treturn this._mintInfo.name;\n\t}\n\n\tget pubkey() {\n\t\treturn this._mintInfo.pubkey;\n\t}\n\n\tget nuts() {\n\t\treturn this._mintInfo.nuts;\n\t}\n\n\tget version() {\n\t\treturn this._mintInfo.version;\n\t}\n\n\tget motd() {\n\t\treturn this._mintInfo.motd;\n\t}\n}\n","import { SerializedBlindedMessage } from './types/index.js';\nimport { ProjPointType } from '@noble/curves/abstract/weierstrass';\n\nclass BlindedMessage {\n\tamount: number;\n\tB_: ProjPointType<bigint>;\n\tid: string;\n\tconstructor(amount: number, B_: ProjPointType<bigint>, id: string) {\n\t\tthis.amount = amount;\n\t\tthis.B_ = B_;\n\t\tthis.id = id;\n\t}\n\tgetSerializedBlindedMessage(): SerializedBlindedMessage {\n\t\treturn { amount: this.amount, B_: this.B_.toHex(true), id: this.id };\n\t}\n}\nexport { BlindedMessage };\n","import {\n\tMintKeys,\n\tProof,\n\tSerializedBlindedMessage,\n\tSerializedBlindedSignature,\n\tSerializedDLEQ\n} from './types';\nimport {\n\tblindMessage,\n\tconstructProofFromPromise,\n\tserializeProof\n} from '@cashu/crypto/modules/client';\nimport { BlindedMessage } from './BlindedMessage';\nimport { bytesToHex, hexToBytes, randomBytes } from '@noble/hashes/utils';\nimport { DLEQ, pointFromHex } from '@cashu/crypto/modules/common';\nimport { verifyDLEQProof_reblind } from '@cashu/crypto/modules/client/NUT12';\nimport { bytesToNumber, numberToHexPadded64, splitAmount } from '../utils';\nimport { deriveBlindingFactor, deriveSecret } from '@cashu/crypto/modules/client/NUT09';\n\nexport interface OutputDataLike {\n\tblindedMessage: SerializedBlindedMessage;\n\tblindingFactor: bigint;\n\tsecret: Uint8Array;\n\n\ttoProof: (signature: SerializedBlindedSignature, keyset: MintKeys) => Proof;\n}\n\nexport type OutputDataFactory = (amount: number, keys: MintKeys) => OutputDataLike;\n\nexport function isOutputDataFactory(\n\tvalue: Array<OutputData> | OutputDataFactory\n): value is OutputDataFactory {\n\treturn typeof value === 'function';\n}\n\nexport class OutputData implements OutputDataLike {\n\tblindedMessage: SerializedBlindedMessage;\n\tblindingFactor: bigint;\n\tsecret: Uint8Array;\n\n\tconstructor(blindedMessage: SerializedBlindedMessage, blidingFactor: bigint, secret: Uint8Array) {\n\t\tthis.secret = secret;\n\t\tthis.blindingFactor = blidingFactor;\n\t\tthis.blindedMessage = blindedMessage;\n\t}\n\n\ttoProof(sig: SerializedBlindedSignature, keyset: MintKeys) {\n\t\tlet dleq: DLEQ | undefined;\n\t\tif (sig.dleq) {\n\t\t\tdleq = {\n\t\t\t\ts: hexToBytes(sig.dleq.s),\n\t\t\t\te: hexToBytes(sig.dleq.e),\n\t\t\t\tr: this.blindingFactor\n\t\t\t};\n\t\t}\n\t\tconst blindSignature = {\n\t\t\tid: sig.id,\n\t\t\tamount: sig.amount,\n\t\t\tC_: pointFromHex(sig.C_),\n\t\t\tdleq: dleq\n\t\t};\n\t\tconst A = pointFromHex(keyset.keys[sig.amount]);\n\t\tconst proof = constructProofFromPromise(blindSignature, this.blindingFactor, this.secret, A);\n\t\tconst serializedProof = {\n\t\t\t...serializeProof(proof),\n\t\t\t...(dleq && {\n\t\t\t\tdleqValid: verifyDLEQProof_reblind(this.secret, dleq, proof.C, A)\n\t\t\t}),\n\t\t\t...(dleq && {\n\t\t\t\tdleq: {\n\t\t\t\t\ts: bytesToHex(dleq.s),\n\t\t\t\t\te: bytesToHex(dleq.e),\n\t\t\t\t\tr: numberToHexPadded64(dleq.r ?? BigInt(0))\n\t\t\t\t} as SerializedDLEQ\n\t\t\t})\n\t\t} as Proof;\n\t\treturn serializedProof;\n\t}\n\n\tstatic createP2PKData(\n\t\tp2pk: { pubkey: string; locktime?: number; refundKeys?: Array<string> },\n\t\tamount: number,\n\t\tkeyset: MintKeys,\n\t\tcustomSplit?: Array<number>\n\t) {\n\t\tconst amounts = splitAmount(amount, keyset.keys, customSplit);\n\t\treturn amounts.map((a) => this.createSingleP2PKData(p2pk, a, keyset.id));\n\t}\n\n\tstatic createSingleP2PKData(\n\t\tp2pk: { pubkey: string; locktime?: number; refundKeys?: Array<string> },\n\t\tamount: number,\n\t\tkeysetId: string\n\t) {\n\t\tconst newSecret: [string, { nonce: string; data: string; tags: Array<any> }] = [\n\t\t\t'P2PK',\n\t\t\t{\n\t\t\t\tnonce: bytesToHex(randomBytes(32)),\n\t\t\t\tdata: p2pk.pubkey,\n\t\t\t\ttags: []\n\t\t\t}\n\t\t];\n\t\tif (p2pk.locktime) {\n\t\t\tnewSecret[1].tags.push(['locktime', p2pk.locktime]);\n\t\t}\n\t\tif (p2pk.refundKeys) {\n\t\t\tnewSecret[1].tags.push(['refund', p2pk.refundKeys]);\n\t\t}\n\t\tconst parsed = JSON.stringify(newSecret);\n\t\tconst secretBytes = new TextEncoder().encode(parsed);\n\t\tconst { r, B_ } = blindMessage(secretBytes);\n\t\treturn new OutputData(\n\t\t\tnew BlindedMessage(amount, B_, keysetId).getSerializedBlindedMessage(),\n\t\t\tr,\n\t\t\tsecretBytes\n\t\t);\n\t}\n\n\tstatic createRandomData(amount: number, keyset: MintKeys, customSplit?: Array<number>) {\n\t\tconst amounts = splitAmount(amount, keyset.keys, customSplit);\n\t\treturn amounts.map((a) => this.createSingleRandomData(a, keyset.id));\n\t}\n\n\tstatic createSingleRandomData(amount: number, keysetId: string) {\n\t\tconst randomHex = bytesToHex(randomBytes(32));\n\t\tconst secretBytes = new TextEncoder().encode(randomHex);\n\t\tconst { r, B_ } = blindMessage(secretBytes);\n\t\treturn new OutputData(\n\t\t\tnew BlindedMessage(amount, B_, keysetId).getSerializedBlindedMessage(),\n\t\t\tr,\n\t\t\tsecretBytes\n\t\t);\n\t}\n\n\tstatic createDeterministicData(\n\t\tamount: number,\n\t\tseed: Uint8Array,\n\t\tcounter: number,\n\t\tkeyset: MintKeys,\n\t\tcustomSplit?: Array<number>\n\t): Array<OutputData> {\n\t\tconst amounts = splitAmount(amount, keyset.keys, customSplit);\n\t\treturn amounts.map((a, i) =>\n\t\t\tthis.createSingleDeterministicData(a, seed, counter + i, keyset.id)\n\t\t);\n\t}\n\n\tstatic createSingleDeterministicData(\n\t\tamount: number,\n\t\tseed: Uint8Array,\n\t\tcounter: number,\n\t\tkeysetId: string\n\t) {\n\t\tconst secretBytes = deriveSecret(seed, keysetId, counter);\n\t\tconst secretBytesAsHex = bytesToHex(secretBytes);\n\t\tconst utf8SecretBytes = new TextEncoder().encode(secretBytesAsHex);\n\t\tconst deterministicR = bytesToNumber(deriveBlindingFactor(seed, keysetId, counter));\n\t\tconst { r, B_ } = blindMessage(utf8SecretBytes, deterministicR);\n\t\treturn new OutputData(\n\t\t\tnew BlindedMessage(amount, B_, keysetId).getSerializedBlindedMessage(),\n\t\t\tr,\n\t\t\tutf8SecretBytes\n\t\t);\n\t}\n}\n","import {\n\tblindMessage,\n\tconstructProofFromPromise,\n\tserializeProof\n} from '@cashu/crypto/modules/client';\nimport { deriveBlindingFactor, deriveSecret } from '@cashu/crypto/modules/client/NUT09';\nimport { createP2PKsecret, getSignedProofs } from '@cashu/crypto/modules/client/NUT11';\nimport { verifyDLEQProof_reblind } from '@cashu/crypto/modules/client/NUT12';\nimport { hashToCurve, pointFromHex } from '@cashu/crypto/modules/common';\nimport { DLEQ, type Proof as NUT11Proof } from '@cashu/crypto/modules/common';\nimport { bytesToHex, hexToBytes, randomBytes } from '@noble/hashes/utils';\nimport { CashuMint } from './CashuMint.js';\nimport { BlindedMessage } from './model/BlindedMessage.js';\nimport { MintInfo } from './model/MintInfo.js';\nimport {\n\tGetInfoResponse,\n\tMeltProofOptions,\n\tMeltQuoteState,\n\tMintProofOptions,\n\tMintQuoteResponse,\n\tMintQuoteState,\n\tOutputAmounts,\n\tProofState,\n\tReceiveOptions,\n\tRestoreOptions,\n\tSendOptions,\n\tSerializedBlindedSignature,\n\tSerializedDLEQ,\n\tSwapOptions,\n\ttype MeltPayload,\n\ttype MeltProofsResponse,\n\ttype MeltQuotePayload,\n\ttype MeltQuoteResponse,\n\ttype MintKeys,\n\ttype MintKeyset,\n\ttype MintPayload,\n\ttype MintQuotePayload,\n\ttype Proof,\n\ttype SendResponse,\n\ttype SerializedBlindedMessage,\n\ttype SwapPayload,\n\ttype Token,\n\tSwapTransaction\n} from './model/types/index.js';\nimport { SubscriptionCanceller } from './model/types/wallet/websocket.js';\nimport {\n\tbytesToNumber,\n\tgetDecodedToken,\n\tgetKeepAmounts,\n\thasValidDleq,\n\tnumberToHexPadded64,\n\tsplitAmount,\n\tstripDleq,\n\tsumProofs\n} from './utils.js';\nimport {\n\tOutputData,\n\tOutputDataFactory,\n\tOutputDataLike,\n\tisOutputDataFactory\n} from './model/OutputData.js';\n\n/**\n * The default number of proofs per denomination to keep in a wallet.\n */\nconst DEFAULT_DENOMINATION_TARGET = 3;\n\n/**\n * The default unit for the wallet, if not specified in constructor.\n */\nconst DEFAULT_UNIT = 'sat';\n\n/**\n * Class that represents a Cashu wallet.\n * This class should act as the entry point for this library\n */\nclass CashuWallet {\n\tprivate _keys: Map<string, MintKeys> = new Map();\n\tprivate _keysetId: string | undefined;\n\tprivate _keysets: Array<MintKeyset> = [];\n\tprivate _seed: Uint8Array | undefined = undefined;\n\tprivate _unit = DEFAULT_UNIT;\n\tprivate _mintInfo: MintInfo | undefined = undefined;\n\tprivate _denominationTarget = DEFAULT_DENOMINATION_TARGET;\n\tprivate _keepFactory: OutputDataFactory | undefined;\n\n\tmint: CashuMint;\n\n\t/**\n\t * @param mint Cashu mint instance is used to make api calls\n\t * @param options.unit optionally set unit (default is 'sat')\n\t * @param options.keys public keys from the mint (will be fetched from mint if not provided)\n\t * @param options.keysets keysets from the mint (will be fetched from mint if not provided)\n\t * @param options.mintInfo mint info from the mint (will be fetched from mint if not provided)\n\t * @param options.denominationTarget target number proofs per denomination (default: see @constant DEFAULT_DENOMINATION_TARGET)\n\t * @param options.bip39seed BIP39 seed for deterministic secrets.\n\t * @param options.keepFactory A function that will be used by all parts of the library that produce proofs to be kept (change, etc.).\n\t * This can lead to poor performance, in which case the seed should be directly provided\n\t */\n\tconstructor(\n\t\tmint: CashuMint,\n\t\toptions?: {\n\t\t\tunit?: string;\n\t\t\tkeys?: Array<MintKeys> | MintKeys;\n\t\t\tkeysets?: Array<MintKeyset>;\n\t\t\tmintInfo?: GetInfoResponse;\n\t\t\tbip39seed?: Uint8Array;\n\t\t\tdenominationTarget?: number;\n\t\t\tkeepFactory?: OutputDataFactory;\n\t\t}\n\t) {\n\t\tthis.mint = mint;\n\t\tlet keys: Array<MintKeys> = [];\n\t\tif (options?.keys && !Array.isArray(options.keys)) {\n\t\t\tkeys = [options.keys];\n\t\t} else if (options?.keys && Array.isArray(options?.keys)) {\n\t\t\tkeys = options?.keys;\n\t\t}\n\t\tif (keys) keys.forEach((key: MintKeys) => this._keys.set(key.id, key));\n\t\tif (options?.unit) this._unit = options?.unit;\n\t\tif (options?.keysets) this._keysets = options.keysets;\n\t\tif (options?.mintInfo) this._mintInfo = new MintInfo(options.mintInfo);\n\t\tif (options?.denominationTarget) {\n\t\t\tthis._denominationTarget = options.denominationTarget;\n\t\t}\n\n\t\tif (options?.bip39seed) {\n\t\t\tif (options.bip39seed instanceof Uint8Array) {\n\t\t\t\tthis._seed = options.bip39seed;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow new Error('bip39seed must be a valid UInt8Array');\n\t\t}\n\t\tif (options?.keepFactory) {\n\t\t\tthis._keepFactory = options.keepFactory;\n\t\t}\n\t}\n\n\tget unit(): string {\n\t\treturn this._unit;\n\t}\n\tget keys(): Map<string, MintKeys> {\n\t\treturn this._keys;\n\t}\n\tget keysetId(): string {\n\t\tif (!this._keysetId) {\n\t\t\tthrow new Error('No keysetId set');\n\t\t}\n\t\treturn this._keysetId;\n\t}\n\tset keysetId(keysetId: string) {\n\t\tthis._keysetId = keysetId;\n\t}\n\tget keysets(): Array<MintKeyset> {\n\t\treturn this._keysets;\n\t}\n\tget mintInfo(): MintInfo {\n\t\tif (!this._mintInfo) {\n\t\t\tthrow new Error('Mint info not loaded');\n\t\t}\n\t\treturn this._mintInfo;\n\t}\n\n\t/**\n\t * Get information about the mint\n\t * @returns mint info\n\t */\n\tasync getMintInfo(): Promise<MintInfo> {\n\t\tconst infoRes = await this.mint.getInfo();\n\t\tthis._mintInfo = new MintInfo(infoRes);\n\t\treturn this._mintInfo;\n\t}\n\n\t/**\n\t * Load mint information, keysets and keys. This function can be called if no keysets are passed in the constructor\n\t */\n\tasync loadMint() {\n\t\tawait this.getMintInfo();\n\t\tawait this.getKeySets();\n\t\tawait this.getKeys();\n\t}\n\n\t/**\n\t * Choose a keyset to activate based on the lowest input fee\n\t *\n\t * Note: this function will filter out deprecated base64 keysets\n\t *\n\t * @param keysets keysets to choose from\n\t * @returns active keyset\n\t */\n\tgetActiveKeyset(keysets: Array<MintKeyset>): MintKeyset {\n\t\tlet activeKeysets = keysets.filter((k: MintKeyset) => k.active);\n\n\t\t// we only consider keyset IDs that start with \"00\"\n\t\tactiveKeysets = activeKeysets.filter((k: MintKeyset) => k.id.startsWith('00'));\n\n\t\tconst activeKeyset = activeKeysets.sort(\n\t\t\t(a: MintKeyset, b: MintKeyset) => (a.input_fee_ppk ?? 0) - (b.input_fee_ppk ?? 0)\n\t\t)[0];\n\t\tif (!activeKeyset) {\n\t\t\tthrow new Error('No active keyset found');\n\t\t}\n\t\treturn activeKeyset;\n\t}\n\n\t/**\n\t * Get keysets from the mint with the unit of the wallet\n\t * @returns keysets with wallet's unit\n\t */\n\tasync getKeySets(): Promise<Array<MintKeyset>> {\n\t\tconst allKeysets = await this.mint.getKeySets();\n\t\tconst unitKeysets = allKeysets.keysets.filter((k: MintKeyset) => k.unit === this._unit);\n\t\tthis._keysets = unitKeysets;\n\t\treturn this._keysets;\n\t}\n\n\t/**\n\t * Get all active keys from the mint and set the keyset with the lowest fees as the active wallet keyset.\n\t * @returns keyset\n\t */\n\tasync getAllKeys(): Promise<Array<MintKeys>> {\n\t\tconst keysets = await this.mint.getKeys();\n\t\tthis._keys = new Map(keysets.keysets.map((k: MintKeys) => [k.id, k]));\n\t\tthis.keysetId = this.getActiveKeyset(this._keysets).id;\n\t\treturn keysets.keysets;\n\t}\n\n\t/**\n\t * Get public keys from the mint. If keys were already fetched, it will return those.\n\t *\n\t * If `keysetId` is set, it will fetch and return that specific keyset.\n\t * Otherwise, we select an active keyset with the unit of the wallet.\n\t *\n\t * @param keysetId optional keysetId to get keys for\n\t * @param forceRefresh? if set to true, it will force refresh the keyset from the mint\n\t * @returns keyset\n\t */\n\tasync getKeys(keysetId?: string, forceRefresh?: boolean): Promise<MintKeys> {\n\t\tif (!(this._keysets.length > 0) || forceRefresh) {\n\t\t\tawait this.getKeySets();\n\t\t}\n\t\t// no keyset id is chosen, let's choose one\n\t\tif (!keysetId) {\n\t\t\tconst localKeyset = this.getActiveKeyset(this._keysets);\n\t\t\tkeysetId = localKeyset.id;\n\t\t}\n\t\t// make sure we have keyset for this id\n\t\tif (!this._keysets.find((k: MintKeyset) => k.id === keysetId)) {\n\t\t\tawait this.getKeySets();\n\t\t\tif (!this._keysets.find((k: MintKeyset) => k.id === keysetId)) {\n\t\t\t\tthrow new Error(`could not initialize keys. No keyset with id '${keysetId}' found`);\n\t\t\t}\n\t\t}\n\n\t\t// make sure we have keys for this id\n\t\tif (!this._keys.get(keysetId)) {\n\t\t\tconst keys = await this.mint.getKeys(keysetId);\n\t\t\tthis._keys.set(keysetId, keys.keysets[0]);\n\t\t}\n\n\t\t// set and return\n\t\tthis.keysetId = keysetId;\n\t\treturn this._keys.get(keysetId) as MintKeys;\n\t}\n\n\t/**\n\t * Receive an encoded or raw Cashu token (only supports single tokens. It will only process the first token in the token array)\n\t * @param {(string|Token)} token - Cashu token, either as string or decoded\n\t * @param {ReceiveOptions} [options] - Optional configuration for token processing\n\t * @returns New token with newly created proofs, token entries that had errors\n\t */\n\tasync receive(token: string | Token, options?: ReceiveOptions): Promise<Array<Proof>> {\n\t\tconst { requireDleq, keysetId, outputAmounts, counter, pubkey, privkey, outputData, p2pk } =\n\t\t\toptions || {};\n\n\t\tif (typeof token === 'string') {\n\t\t\ttoken = getDecodedToken(token);\n\t\t}\n\t\tconst keys = await this.getKeys(keysetId);\n\t\tif (requireDleq) {\n\t\t\tif (token.proofs.some((p: Proof) => !hasValidDleq(p, keys))) {\n\t\t\t\tthrow new Error('Token contains proofs with invalid DLEQ');\n\t\t\t}\n\t\t}\n\t\tconst amount = sumProofs(token.proofs) - this.getFeesForProofs(token.proofs);\n\t\tlet newOutputData: { send: Array<OutputDataLike> | OutputDataFactory } | undefined = undefined;\n\t\tif (outputData) {\n\t\t\tnewOutputData = { send: outputData };\n\t\t} else if (this._keepFactory) {\n\t\t\tnewOutputData = { send: this._keepFactory };\n\t\t}\n\t\tconst swapTransaction = this.createSwapPayload(\n\t\t\tamount,\n\t\t\ttoken.proofs,\n\t\t\tkeys,\n\t\t\toutputAmounts,\n\t\t\tcounter,\n\t\t\tpubkey,\n\t\t\tprivkey,\n\t\t\tnewOutputData,\n\t\t\tp2pk\n\t\t);\n\t\tconst { signatures } = await this.mint.swap(swapTransaction.payload);\n\t\tconst proofs = swapTransaction.outputData.map((d, i) => d.toProof(signatures[i], keys));\n\t\tconst orderedProofs: Array<Proof> = [];\n\t\tswapTransaction.sortedIndices.forEach((s, o) => {\n\t\t\torderedProofs[s] = proofs[o];\n\t\t});\n\t\treturn orderedProofs;\n\t}\n\n\t/**\n\t * Send proofs of a given amount, by providing at least the required amount of proofs\n\t * @param amount amount to send\n\t * @param proofs array of proofs (accumulated amount of proofs must be >= than amount)\n\t * @param {SendOptions} [options] - Optional parameters for configuring the send operation\n\t * @returns {SendResponse}\n\t */\n\tasync send(amount: number, proofs: Array<Proof>, options?: SendOptions): Promise<SendResponse> {\n\t\tconst {\n\t\t\tproofsWeHave,\n\t\t\toffline,\n\t\t\tincludeFees,\n\t\t\tincludeDleq,\n\t\t\tkeysetId,\n\t\t\toutputAmounts,\n\t\t\tpubkey,\n\t\t\tprivkey,\n\t\t\toutputData\n\t\t} = options || {};\n\t\tif (includeDleq) {\n\t\t\tproofs = proofs.filter((p: Proof) => p.dleq != undefined);\n\t\t}\n\t\tif (sumProofs(proofs) < amount) {\n\t\t\tthrow new Error('Not enough funds available to send');\n\t\t}\n\t\tconst { keep: keepProofsOffline, send: sendProofOffline } = this.selectProofsToSend(\n\t\t\tproofs,\n\t\t\tamount,\n\t\t\toptions?.includeFees\n\t\t);\n\t\tconst expectedFee = includeFees ? this.getFeesForProofs(sendProofOffline) : 0;\n\t\tif (\n\t\t\t!offline &&\n\t\t\t(sumProofs(sendProofOffline) != amount + expectedFee || // if the exact amount cannot be selected\n\t\t\t\toutputAmounts ||\n\t\t\t\tpubkey ||\n\t\t\t\tprivkey ||\n\t\t\t\tkeysetId ||\n\t\t\t\toutputData) // these options require a swap\n\t\t) {\n\t\t\t// we need to swap\n\t\t\t// input selection, needs fees because of the swap\n\t\t\tconst { keep: keepProofsSelect, send: sendProofs } = this.selectProofsToSend(\n\t\t\t\tproofs,\n\t\t\t\tamount,\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tproofsWeHave?.push(...keepProofsSelect);\n\n\t\t\tconst sendRes = await this.swap(amount, sendProofs, options);\n\t\t\tlet { keep, send } = sendRes;\n\t\t\tconst serialized = sendRes.serialized;\n\t\t\tkeep = keepProofsSelect.concat(keep);\n\n\t\t\tif (!includeDleq) {\n\t\t\t\tsend = stripDleq(send);\n\t\t\t}\n\n\t\t\treturn { keep, send, serialized };\n\t\t}\n\n\t\tif (sumProofs(sendProofOffline) < amount + expectedFee) {\n\t\t\tthrow new Error('Not enough funds available to send');\n\t\t}\n\n\t\tif (!includeDleq) {\n\t\t\treturn { keep: keepProofsOffline, send: stripDleq(sendProofOffline) };\n\t\t}\n\n\t\treturn { keep: keepProofsOffline, send: sendProofOffline };\n\t}\n\n\tselectProofsToSend(\n\t\tproofs: Array<Proof>,\n\t\tamountToSend: number,\n\t\tincludeFees?: boolean\n\t): SendResponse {\n\t\tconst sortedProofs = proofs.sort((a: Proof, b: Proof) => a.amount - b.amount);\n\t\tconst smallerProofs = sortedProofs\n\t\t\t.filter((p: Proof) => p.amount <= amountToSend)\n\t\t\t.sort((a: Proof, b: Proof) => b.amount - a.amount);\n\t\tconst biggerProofs = sortedProofs\n\t\t\t.filter((p: Proof) => p.amount > amountToSend)\n\t\t\t.sort((a: Proof, b: Proof) => a.amount - b.amount);\n\t\tconst nextBigger = biggerProofs[0];\n\t\tif (!smallerProofs.length && nextBigger) {\n\t\t\treturn {\n\t\t\t\tkeep: proofs.filter((p: Proof) => p.secret !== nextBigger.secret),\n\t\t\t\tsend: [nextBigger]\n\t\t\t};\n\t\t}\n\n\t\tif (!smallerProofs.length && !nextBigger) {\n\t\t\treturn { keep: proofs, send: [] };\n\t\t}\n\n\t\tlet remainder = amountToSend;\n\t\tlet selectedProofs = [smallerProofs[0]];\n\t\tconst returnedProofs = [];\n\t\tconst feePPK = includeFees ? this.getFeesForProofs(selectedProofs) : 0;\n\t\tremainder -= selectedProofs[0].amount - feePPK / 1000;\n\t\tif (remainder > 0) {\n\t\t\tconst { keep, send } = this.selectProofsToSend(\n\t\t\t\tsmallerProofs.slice(1),\n\t\t\t\tremainder,\n\t\t\t\tincludeFees\n\t\t\t);\n\t\t\tselectedProofs.push(...send);\n\t\t\treturnedProofs.push(...keep);\n\t\t}\n\n\t\tconst selectedFeePPK = includeFees ? this.getFeesForProofs(selectedProofs) : 0;\n\t\tif (sumProofs(selectedProofs) < amountToSend + selectedFeePPK && nextBigger) {\n\t\t\tselectedProofs = [nextBigger];\n\t\t}\n\n\t\treturn {\n\t\t\tkeep: proofs.filter((p: Proof) => !selectedProofs.includes(p)),\n\t\t\tsend: selectedProofs\n\t\t};\n\t}\n\n\t/**\n\t * calculates the fees based on inputs (proofs)\n\t * @param proofs input proofs to calculate fees for\n\t * @returns fee amount\n\t */\n\tgetFeesForProofs(proofs: Array<Proof>): number {\n\t\tif (!this._keysets.length) {\n\t\t\tthrow new Error('Could not calculate fees. No keysets found');\n\t\t}\n\t\tconst keysetIds = new Set(proofs.map((p: Proof) => p.id));\n\t\tkeysetIds.forEach((id: string) => {\n\t\t\tif (!this._keysets.find((k: MintKeyset) => k.id === id)) {\n\t\t\t\tthrow new Error(`Could not calculate fees. No keyset found with id: ${id}`);\n\t\t\t}\n\t\t});\n\n\t\tconst fees = Math.floor(\n\t\t\tMath.max(\n\t\t\t\t(proofs.reduce(\n\t\t\t\t\t(total: number, curr: Proof) =>\n\t\t\t\t\t\ttotal + (this._keysets.find((k: MintKeyset) => k.id === curr.id)?.input_fee_ppk || 0),\n\t\t\t\t\t0\n\t\t\t\t) +\n\t\t\t\t\t999) /\n\t\t\t\t\t1000,\n\t\t\t\t0\n\t\t\t)\n\t\t);\n\t\treturn fees;\n\t}\n\n\t/**\n\t * calculates the fees based on inputs for a given keyset\n\t * @param nInputs number of inputs\n\t * @param keysetId keysetId used to lookup `input_fee_ppk`\n\t * @returns fee amount\n\t */\n\tgetFeesForKeyset(nInputs: number, keysetId: string): number {\n\t\tconst fees = Math.floor(\n\t\t\tMath.max(\n\t\t\t\t(nInputs * (this._keysets.find((k: MintKeyset) => k.id === keysetId)?.input_fee_ppk || 0) +\n\t\t\t\t\t999) /\n\t\t\t\t\t1000,\n\t\t\t\t0\n\t\t\t)\n\t\t);\n\t\treturn fees;\n\t}\n\n\t/**\n\t * Splits and creates sendable tokens\n\t * if no amount is specified, the amount is implied by the cumulative amount of all proofs\n\t * if both amount and preference are set, but the preference cannot fulfill the amount, then we use the default split\n\t *  @param {SwapOptions} [options] - Optional parameters for configuring the swap operation\n\t * @returns promise of the change- and send-proofs\n\t */\n\tasync swap(amount: number, proofs: Array<Proof>, options?: SwapOptions): Promise<SendResponse> {\n\t\tlet { outputAmounts } = options || {};\n\t\tconst { includeFees, keysetId, counter, pubkey, privkey, proofsWeHave, outputData, p2pk } =\n\t\t\toptions || {};\n\t\tconst keyset = await this.getKeys(keysetId);\n\n\t\tconst proofsToSend = proofs;\n\t\tlet amountToSend = amount;\n\t\tconst amountAvailable = sumProofs(proofs);\n\t\tlet amountToKeep = amountAvailable - amountToSend - this.getFeesForProofs(proofsToSend);\n\t\t// send output selection\n\t\tlet sendAmounts = outputAmounts?.sendAmounts || splitAmount(amountToSend, keyset.keys);\n\n\t\t// include the fees to spend the the outputs of the swap\n\t\tif (includeFees) {\n\t\t\tlet outputFee = this.getFeesForKeyset(sendAmounts.length, keyset.id);\n\t\t\tlet sendAmountsFee = splitAmount(outputFee, keyset.keys);\n\t\t\twhile (\n\t\t\t\tthis.getFeesForKeyset(sendAmounts.concat(sendAmountsFee).length, keyset.id) > outputFee\n\t\t\t) {\n\t\t\t\toutputFee++;\n\t\t\t\tsendAmountsFee = splitAmount(outputFee, keyset.keys);\n\t\t\t}\n\t\t\tsendAmounts = sendAmounts.concat(sendAmountsFee);\n\t\t\tamountToSend += outputFee;\n\t\t\tamountToKeep -= outputFee;\n\t\t}\n\n\t\t// keep output selection\n\t\tlet keepAmounts;\n\t\tif (!outputAmounts?.keepAmounts && proofsWeHave) {\n\t\t\tkeepAmounts = getKeepAmounts(\n\t\t\t\tproofsWeHave,\n\t\t\t\tamountToKeep,\n\t\t\t\tkeyset.keys,\n\t\t\t\tthis._denominationTarget\n\t\t\t);\n\t\t} else if (outputAmounts) {\n\t\t\tif (outputAmounts.keepAmounts?.reduce((a: number, b: number) => a + b, 0) != amountToKeep) {\n\t\t\t\tthrow new Error('Keep amounts do not match amount to keep');\n\t\t\t}\n\t\t\tkeepAmounts = outputAmounts.keepAmounts;\n\t\t}\n\n\t\tif (amountToSend + this.getFeesForProofs(proofsToSend) > amountAvailable) {\n\t\t\tconsole.error(\n\t\t\t\t`Not enough funds available (${amountAvailable}) for swap amountToSend: ${amountToSend} + fee: ${this.getFeesForProofs(\n\t\t\t\t\tproofsToSend\n\t\t\t\t)} | length: ${proofsToSend.length}`\n\t\t\t);\n\t\t\tthrow new Error(`Not enough funds available for swap`);\n\t\t}\n\n\t\tif (amountToSend + this.getFeesForProofs(proofsToSend) + amountToKeep != amountAvailable) {\n\t\t\tthrow new Error('Amounts do not match for swap');\n\t\t}\n\n\t\toutputAmounts = {\n\t\t\tkeepAmounts: keepAmounts,\n\t\t\tsendAmounts: sendAmounts\n\t\t};\n\n\t\tconst keepOutputData = outputData?.keep || this._keepFactory;\n\t\tconst sendOutputData = outputData?.send;\n\n\t\tconst swapTransaction = this.createSwapPayload(\n\t\t\tamountToSend,\n\t\t\tproofsToSend,\n\t\t\tkeyset,\n\t\t\toutputAmounts,\n\t\t\tcounter,\n\t\t\tpubkey,\n\t\t\tprivkey,\n\t\t\t{ keep: keepOutputData, send: sendOutputData },\n\t\t\tp2pk\n\t\t);\n\t\tconst { signatures } = await this.mint.swap(swapTransaction.payload);\n\t\tconst swapProofs = swapTransaction.outputData.map((d, i) => d.toProof(signatures[i], keyset));\n\t\tconst splitProofsToKeep: Array<Proof> = [];\n\t\tconst splitProofsToSend: Array<Proof> = [];\n\t\tconst reorderedKeepVector = Array(swapTransaction.keepVector.length);\n\t\tconst reorderedProofs = Array(swapProofs.length);\n\t\tswapTransaction.sortedIndices.forEach((s, i) => {\n\t\t\treorderedKeepVector[s] = swapTransaction.keepVector[i];\n\t\t\treorderedProofs[s] = swapProofs[i];\n\t\t});\n\t\treorderedProofs.forEach((p, i) => {\n\t\t\tif (reorderedKeepVector[i]) {\n\t\t\t\tsplitProofsToKeep.push(p);\n\t\t\t} else {\n\t\t\t\tsplitProofsToSend.push(p);\n\t\t\t}\n\t\t});\n\t\treturn {\n\t\t\tkeep: splitProofsToKeep,\n\t\t\tsend: splitProofsToSend\n\t\t};\n\t}\n\n\t/**\n\t * Regenerates\n\t * @param start set starting point for count (first cycle for each keyset should usually be 0)\n\t * @param count set number of blinded messages that should be generated\n\t * @param options.keysetId set a custom keysetId to restore from. keysetIds can be loaded with `CashuMint.getKeySets()`\n\t */\n\tasync restore(\n\t\tstart: number,\n\t\tcount: number,\n\t\toptions?: RestoreOptions\n\t): Promise<{ proofs: Array<Proof> }> {\n\t\tconst { keysetId } = options || {};\n\t\tconst keys = await this.getKeys(keysetId);\n\t\tif (!this._seed) {\n\t\t\tthrow new Error('CashuWallet must be initialized with a seed to use restore');\n\t\t}\n\t\t// create blank amounts for unknown restore amounts\n\t\tconst amounts = Array(count).fill(0);\n\t\tconst outputData = OutputData.createDeterministicData(\n\t\t\tamounts.length,\n\t\t\tthis._seed,\n\t\t\tstart,\n\t\t\tkeys,\n\t\t\tamounts\n\t\t);\n\n\t\tconst { outputs, promises } = await this.mint.restore({\n\t\t\toutputs: outputData.map((d) => d.blindedMessage)\n\t\t});\n\n\t\tconst outputsWithSignatures: Array<{\n\t\t\tsignature: SerializedBlindedSignature;\n\t\t\tdata: OutputData;\n\t\t}> = [];\n\n\t\tfor (let i = 0; i < outputs.length; i++) {\n\t\t\tconst data = outputData.find((d) => d.blindedMessage.B_ === outputs[i].B_);\n\t\t\tif (!data) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\toutputsWithSignatures[i] = {\n\t\t\t\tsignature: promises[i],\n\t\t\t\tdata\n\t\t\t};\n\t\t}\n\t\toutputsWithSignatures.forEach((o) => (o.data.blindedMessage.amount = o.signature.amount));\n\n\t\treturn {\n\t\t\tproofs: outputsWithSignatures.map((d) => d.data.toProof(d.signature, keys))\n\t\t};\n\t}\n\n\t/**\n\t * Requests a mint quote form the mint. Response returns a Lightning payment request for the requested given amount and unit.\n\t * @param amount Amount requesting for mint.\n\t * @param description optional description for the mint quote\n\t * @returns the mint will return a mint quote with a Lightning invoice for minting tokens of the specified amount and unit\n\t */\n\tasync createMintQuote(amount: number, description?: string) {\n\t\tconst mintQuotePayload: MintQuotePayload = {\n\t\t\tunit: this._unit,\n\t\t\tamount: amount,\n\t\t\tdescription: description\n\t\t};\n\t\treturn await this.mint.createMintQuote(mintQuotePayload);\n\t}\n\n\t/**\n\t * Gets an existing mint quote from the mint.\n\t * @param quote Quote ID\n\t * @returns the mint will create and return a Lightning invoice for the specified amount\n\t */\n\tasync checkMintQuote(quote: string) {\n\t\treturn await this.mint.checkMintQuote(quote);\n\t}\n\n\t/**\n\t * Mint proofs for a given mint quote\n\t * @param amount amount to request\n\t * @param quote ID of mint quote\n\t * @param {MintProofOptions} [options] - Optional parameters for configuring the Mint Proof operation\n\t * @returns proofs\n\t */\n\tasync mintProofs(\n\t\tamount: number,\n\t\tquote: string,\n\t\toptions?: MintProofOptions\n\t): Promise<Array<Proof>> {\n\t\tlet { outputAmounts } = options || {};\n\t\tconst { counter, pubkey, p2pk, keysetId, proofsWeHave, outputData } = options || {};\n\n\t\tconst keyset = await this.getKeys(keysetId);\n\t\tif (!outputAmounts && proofsWeHave) {\n\t\t\toutputAmounts = {\n\t\t\t\tkeepAmounts: getKeepAmounts(proofsWeHave, amount, keyset.keys, this._denominationTarget),\n\t\t\t\tsendAmounts: []\n\t\t\t};\n\t\t}\n\n\t\tlet newBlindingData: Array<OutputData> = [];\n\t\tif (outputData) {\n\t\t\tif (isOutputDataFactory(outputData)) {\n\t\t\t\tconst amounts = splitAmount(amount, keyset.keys, outputAmounts?.keepAmounts);\n\t\t\t\tfor (let i = 0; i < amounts.length; i++) {\n\t\t\t\t\tnewBlindingData.push(outputData(amounts[i], keyset));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnewBlindingData = outputData;\n\t\t\t}\n\t\t} else if (this._keepFactory) {\n\t\t\tconst amounts = splitAmount(amount, keyset.keys, outputAmounts?.keepAmounts);\n\t\t\tfor (let i = 0; i < amounts.length; i++) {\n\t\t\t\tnewBlindingData.push(this._keepFactory(amounts[i], keyset));\n\t\t\t}\n\t\t} else {\n\t\t\tnewBlindingData = this.createOutputData(\n\t\t\t\tamount,\n\t\t\t\tkeyset,\n\t\t\t\tcounter,\n\t\t\t\tpubkey,\n\t\t\t\toutputAmounts?.keepAmounts,\n\t\t\t\tp2pk\n\t\t\t);\n\t\t}\n\t\tconst mintPayload: MintPayload = {\n\t\t\toutputs: newBlindingData.map((d) => d.blindedMessage),\n\t\t\tquote: quote\n\t\t};\n\t\tconst { signatures } = await this.mint.mint(mintPayload);\n\t\treturn newBlindingData.map((d, i) => d.toProof(signatures[i], keyset));\n\t}\n\n\t/**\n\t * Requests a melt quote from the mint. Response returns amount and fees for a given unit in order to pay a Lightning invoice.\n\t * @param invoice LN invoice that needs to get a fee estimate\n\t * @returns the mint will create and return a melt quote for the invoice with an amount and fee reserve\n\t */\n\tasync createMeltQuote(invoice: string): Promise<MeltQuoteResponse> {\n\t\tconst meltQuotePayload: MeltQuotePayload = {\n\t\t\tunit: this._unit,\n\t\t\trequest: invoice\n\t\t};\n\t\tconst meltQuote = await this.mint.createMeltQuote(meltQuotePayload);\n\t\treturn meltQuote;\n\t}\n\n\t/**\n\t * Return an existing melt quote from the mint.\n\t * @param quote ID of the melt quote\n\t * @returns the mint will return an existing melt quote\n\t */\n\tasync checkMeltQuote(quote: string): Promise<MeltQuoteResponse> {\n\t\tconst meltQuote = await this.mint.checkMeltQuote(quote);\n\t\treturn meltQuote;\n\t}\n\n\t/**\n\t * Melt proofs for a melt quote. proofsToSend must be at least amount+fee_reserve form the melt quote. This function does not perform coin selection!.\n\t * Returns melt quote and change proofs\n\t * @param meltQuote ID of the melt quote\n\t * @param proofsToSend proofs to melt\n\t * @param {MeltProofOptions} [options] - Optional parameters for configuring the Melting Proof operation\n\t * @returns\n\t */\n\tasync meltProofs(\n\t\tmeltQuote: MeltQuoteResponse,\n\t\tproofsToSend: Array<Proof>,\n\t\toptions?: MeltProofOptions\n\t): Promise<MeltProofsResponse> {\n\t\tconst { keysetId, counter, privkey } = options || {};\n\t\tconst keys = await this.getKeys(keysetId);\n\t\tconst outputData = this.createBlankOutputs(\n\t\t\tsumProofs(proofsToSend) - meltQuote.amount,\n\t\t\tkeys,\n\t\t\tcounter,\n\t\t\tthis._keepFactory\n\t\t);\n\t\tif (privkey != undefined) {\n\t\t\tproofsToSend = getSignedProofs(\n\t\t\t\tproofsToSend.map((p: Proof) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tamount: p.amount,\n\t\t\t\t\t\tC: pointFromHex(p.C),\n\t\t\t\t\t\tid: p.id,\n\t\t\t\t\t\tsecret: new TextEncoder().encode(p.secret)\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t\tprivkey\n\t\t\t).map((p: NUT11Proof) => serializeProof(p));\n\t\t}\n\n\t\tproofsToSend = stripDleq(proofsToSend);\n\n\t\tconst meltPayload: MeltPayload = {\n\t\t\tquote: meltQuote.quote,\n\t\t\tinputs: proofsToSend,\n\t\t\toutputs: outputData.map((d) => d.blindedMessage)\n\t\t};\n\t\tconst meltResponse = await this.mint.melt(meltPayload);\n\t\treturn {\n\t\t\tquote: meltResponse,\n\t\t\tchange: meltResponse.change?.map((s, i) => outputData[i].toProof(s, keys)) ?? []\n\t\t};\n\t}\n\n\t/**\n\t * Creates a split payload\n\t * @param amount amount to send\n\t * @param proofsToSend proofs to split*\n\t * @param outputAmounts? optionally specify the output's amounts to keep and to send.\n\t * @param counter? optionally set counter to derive secret deterministically. CashuWallet class must be initialized with seed phrase to take effect\n\t * @param pubkey? optionally locks ecash to pubkey. Will not be deterministic, even if counter is set!\n\t * @param privkey? will create a signature on the @param proofsToSend secrets if set\n\t * @returns\n\t */\n\tprivate createSwapPayload(\n\t\tamount: number,\n\t\tproofsToSend: Array<Proof>,\n\t\tkeyset: MintKeys,\n\t\toutputAmounts?: OutputAmounts,\n\t\tcounter?: number,\n\t\tpubkey?: string,\n\t\tprivkey?: string,\n\t\tcustomOutputData?: {\n\t\t\tkeep?: Array<OutputDataLike> | OutputDataFactory;\n\t\t\tsend?: Array<OutputDataLike> | OutputDataFactory;\n\t\t},\n\t\tp2pk?: { pubkey: string; locktime?: number; refundKeys?: Array<string> }\n\t): SwapTransaction {\n\t\tconst totalAmount = proofsToSend.reduce((total: number, curr: Proof) => total + curr.amount, 0);\n\t\tif (outputAmounts && outputAmounts.sendAmounts && !outputAmounts.keepAmounts) {\n\t\t\toutputAmounts.keepAmounts = splitAmount(\n\t\t\t\ttotalAmount - amount - this.getFeesForProofs(proofsToSend),\n\t\t\t\tkeyset.keys\n\t\t\t);\n\t\t}\n\t\tconst keepAmount = totalAmount - amount - this.getFeesForProofs(proofsToSend);\n\t\tlet keepOutputData: Array<OutputDataLike> = [];\n\t\tlet sendOutputData: Array<OutputDataLike> = [];\n\n\t\tif (customOutputData?.keep) {\n\t\t\tif (isOutputDataFactory(customOutputData.keep)) {\n\t\t\t\tconst factory = customOutputData.keep;\n\t\t\t\tconst amounts = splitAmount(keepAmount, keyset.keys);\n\t\t\t\tamounts.forEach((a) => {\n\t\t\t\t\tkeepOutputData.push(factory(a, keyset));\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tkeepOutputData = customOutputData.keep;\n\t\t\t}\n\t\t} else {\n\t\t\tkeepOutputData = this.createOutputData(\n\t\t\t\tkeepAmount,\n\t\t\t\tkeyset,\n\t\t\t\tcounter,\n\t\t\t\tpubkey,\n\t\t\t\toutputAmounts?.keepAmounts,\n\t\t\t\tp2pk,\n\t\t\t\tthis._keepFactory\n\t\t\t);\n\t\t}\n\n\t\tif (customOutputData?.send) {\n\t\t\tif (isOutputDataFactory(customOutputData.send)) {\n\t\t\t\tconst factory = customOutputData.send;\n\t\t\t\tconst amounts = splitAmount(amount, keyset.keys);\n\t\t\t\tamounts.forEach((a) => {\n\t\t\t\t\tsendOutputData.push(factory(a, keyset));\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tsendOutputData = customOutputData.send;\n\t\t\t}\n\t\t} else {\n\t\t\tsendOutputData = this.createOutputData(\n\t\t\t\tamount,\n\t\t\t\tkeyset,\n\t\t\t\tcounter ? counter + keepOutputData.length : undefined,\n\t\t\t\tpubkey,\n\t\t\t\toutputAmounts?.sendAmounts,\n\t\t\t\tp2pk\n\t\t\t);\n\t\t}\n\n\t\tif (privkey) {\n\t\t\tproofsToSend = getSignedProofs(\n\t\t\t\tproofsToSend.map((p: Proof) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tamount: p.amount,\n\t\t\t\t\t\tC: pointFromHex(p.C),\n\t\t\t\t\t\tid: p.id,\n\t\t\t\t\t\tsecret: new TextEncoder().encode(p.secret)\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t\tprivkey\n\t\t\t).map((p: NUT11Proof) => serializeProof(p));\n\t\t}\n\n\t\tproofsToSend = stripDleq(proofsToSend);\n\n\t\tconst mergedBlindingData = [...keepOutputData, ...sendOutputData];\n\t\tconst indices = mergedBlindingData\n\t\t\t.map((_, i) => i)\n\t\t\t.sort(\n\t\t\t\t(a, b) =>\n\t\t\t\t\tmergedBlindingData[a].blindedMessage.amount - mergedBlindingData[b].blindedMessage.amount\n\t\t\t);\n\t\tconst keepVector = [\n\t\t\t...Array(keepOutputData.length).fill(true),\n\t\t\t...Array(sendOutputData.length).fill(false)\n\t\t];\n\n\t\tconst sortedOutputData = indices.map((i) => mergedBlindingData[i]);\n\t\tconst sortedKeepVector = indices.map((i) => keepVector[i]);\n\n\t\treturn {\n\t\t\tpayload: {\n\t\t\t\tinputs: proofsToSend,\n\t\t\t\toutputs: sortedOutputData.map((d) => d.blindedMessage)\n\t\t\t},\n\t\t\toutputData: sortedOutputData,\n\t\t\tkeepVector: sortedKeepVector,\n\t\t\tsortedIndices: indices\n\t\t};\n\t}\n\n\t/**\n\t * Get an array of the states of proofs from the mint (as an array of CheckStateEnum's)\n\t * @param proofs (only the `secret` field is required)\n\t * @returns\n\t */\n\tasync checkProofsStates(proofs: Array<Proof>): Promise<Array<ProofState>> {\n\t\tconst enc = new TextEncoder();\n\t\tconst Ys = proofs.map((p: Proof) => hashToCurve(enc.encode(p.secret)).toHex(true));\n\t\t// TODO: Replace this with a value from the info endpoint of the mint eventually\n\t\tconst BATCH_SIZE = 100;\n\t\tconst states: Array<ProofState> = [];\n\t\tfor (let i = 0; i < Ys.length; i += BATCH_SIZE) {\n\t\t\tconst YsSlice = Ys.slice(i, i + BATCH_SIZE);\n\t\t\tconst { states: batchStates } = await this.mint.check({\n\t\t\t\tYs: YsSlice\n\t\t\t});\n\t\t\tconst stateMap: { [y: string]: ProofState } = {};\n\t\t\tbatchStates.forEach((s) => {\n\t\t\t\tstateMap[s.Y] = s;\n\t\t\t});\n\t\t\tfor (let j = 0; j < YsSlice.length; j++) {\n\t\t\t\tconst state = stateMap[YsSlice[j]];\n\t\t\t\tif (!state) {\n\t\t\t\t\tthrow new Error('Could not find state for proof with Y: ' + YsSlice[j]);\n\t\t\t\t}\n\t\t\t\tstates.push(state);\n\t\t\t}\n\t\t}\n\t\treturn states;\n\t}\n\n\t/**\n\t * Register a callback to be called whenever a mint quote's state changes\n\t * @param quoteIds List of mint quote IDs that should be subscribed to\n\t * @param callback Callback function that will be called whenever a mint quote state changes\n\t * @param errorCallback\n\t * @returns\n\t */\n\tasync onMintQuoteUpdates(\n\t\tquoteIds: Array<string>,\n\t\tcallback: (payload: MintQuoteResponse) => void,\n\t\terrorCallback: (e: Error) => void\n\t): Promise<SubscriptionCanceller> {\n\t\tawait this.mint.connectWebSocket();\n\t\tif (!this.mint.webSocketConnection) {\n\t\t\tthrow new Error('failed to establish WebSocket connection.');\n\t\t}\n\t\tconst subId = this.mint.webSocketConnection.createSubscription(\n\t\t\t{ kind: 'bolt11_mint_quote', filters: quoteIds },\n\t\t\tcallback,\n\t\t\terrorCallback\n\t\t);\n\t\treturn () => {\n\t\t\tthis.mint.webSocketConnection?.cancelSubscription(subId, callback);\n\t\t};\n\t}\n\n\t/**\n\t * Register a callback to be called whenever a melt quote's state changes\n\t * @param quoteIds List of melt quote IDs that should be subscribed to\n\t * @param callback Callback function that will be called whenever a melt quote state changes\n\t * @param errorCallback\n\t * @returns\n\t */\n\tasync onMeltQuotePaid(\n\t\tquoteId: string,\n\t\tcallback: (payload: MeltQuoteResponse) => void,\n\t\terrorCallback: (e: Error) => void\n\t): Promise<SubscriptionCanceller> {\n\t\treturn this.onMeltQuoteUpdates(\n\t\t\t[quoteId],\n\t\t\t(p) => {\n\t\t\t\tif (p.state === MeltQuoteState.PAID) {\n\t\t\t\t\tcallback(p);\n\t\t\t\t}\n\t\t\t},\n\t\t\terrorCallback\n\t\t);\n\t}\n\n\t/**\n\t * Register a callback to be called when a single mint quote gets paid\n\t * @param quoteId Mint quote id that should be subscribed to\n\t * @param callback Callback function that will be called when this mint quote gets paid\n\t * @param errorCallback\n\t * @returns\n\t */\n\tasync onMintQuotePaid(\n\t\tquoteId: string,\n\t\tcallback: (payload: MintQuoteResponse) => void,\n\t\terrorCallback: (e: Error) => void\n\t): Promise<SubscriptionCanceller> {\n\t\treturn this.onMintQuoteUpdates(\n\t\t\t[quoteId],\n\t\t\t(p) => {\n\t\t\t\tif (p.state === MintQuoteState.PAID) {\n\t\t\t\t\tcallback(p);\n\t\t\t\t}\n\t\t\t},\n\t\t\terrorCallback\n\t\t);\n\t}\n\n\t/**\n\t * Register a callback to be called when a single melt quote gets paid\n\t * @param quoteId Melt quote id that should be subscribed to\n\t * @param callback Callback function that will be called when this melt quote gets paid\n\t * @param errorCallback\n\t * @returns\n\t */\n\tasync onMeltQuoteUpdates(\n\t\tquoteIds: Array<string>,\n\t\tcallback: (payload: MeltQuoteResponse) => void,\n\t\terrorCallback: (e: Error) => void\n\t): Promise<SubscriptionCanceller> {\n\t\tawait this.mint.connectWebSocket();\n\t\tif (!this.mint.webSocketConnection) {\n\t\t\tthrow new Error('failed to establish WebSocket connection.');\n\t\t}\n\t\tconst subId = this.mint.webSocketConnection.createSubscription(\n\t\t\t{ kind: 'bolt11_melt_quote', filters: quoteIds },\n\t\t\tcallback,\n\t\t\terrorCallback\n\t\t);\n\t\treturn () => {\n\t\t\tthis.mint.webSocketConnection?.cancelSubscription(subId, callback);\n\t\t};\n\t}\n\n\t/**\n\t * Register a callback to be called whenever a subscribed proof state changes\n\t * @param proofs List of proofs that should be subscribed to\n\t * @param callback Callback function that will be called whenever a proof's state changes\n\t * @param errorCallback\n\t * @returns\n\t */\n\tasync onProofStateUpdates(\n\t\tproofs: Array<Proof>,\n\t\tcallback: (payload: ProofState & { proof: Proof }) => void,\n\t\terrorCallback: (e: Error) => void\n\t): Promise<SubscriptionCanceller> {\n\t\tawait this.mint.connectWebSocket();\n\t\tif (!this.mint.webSocketConnection) {\n\t\t\tthrow new Error('failed to establish WebSocket connection.');\n\t\t}\n\t\tconst enc = new TextEncoder();\n\t\tconst proofMap: { [y: string]: Proof } = {};\n\t\tfor (let i = 0; i < proofs.length; i++) {\n\t\t\tconst y = hashToCurve(enc.encode(proofs[i].secret)).toHex(true);\n\t\t\tproofMap[y] = proofs[i];\n\t\t}\n\t\tconst ys = Object.keys(proofMap);\n\t\tconst subId = this.mint.webSocketConnection.createSubscription(\n\t\t\t{ kind: 'proof_state', filters: ys },\n\t\t\t(p: ProofState) => {\n\t\t\t\tcallback({ ...p, proof: proofMap[p.Y] });\n\t\t\t},\n\t\t\terrorCallback\n\t\t);\n\t\treturn () => {\n\t\t\tthis.mint.webSocketConnection?.cancelSubscription(subId, callback);\n\t\t};\n\t}\n\n\t/**\n\t * Creates blinded messages for a according to @param amounts\n\t * @param amount array of amounts to create blinded messages for\n\t * @param counter? optionally set counter to derive secret deterministically. CashuWallet class must be initialized with seed phrase to take effect\n\t * @param keyksetId? override the keysetId derived from the current mintKeys with a custom one. This should be a keyset that was fetched from the `/keysets` endpoint\n\t * @param pubkey? optionally locks ecash to pubkey. Will not be deterministic, even if counter is set!\n\t * @returns blinded messages, secrets, rs, and amounts\n\t */\n\tprivate createOutputData(\n\t\tamount: number,\n\t\tkeyset: MintKeys,\n\t\tcounter?: number,\n\t\tpubkey?: string,\n\t\toutputAmounts?: Array<number>,\n\t\tp2pk?: { pubkey: string; locktime?: number; refundKeys?: Array<string> },\n\t\tfactory?: OutputDataFactory\n\t): Array<OutputDataLike> {\n\t\tlet outputData: Array<OutputDataLike>;\n\t\tif (pubkey) {\n\t\t\toutputData = OutputData.createP2PKData({ pubkey }, amount, keyset, outputAmounts);\n\t\t} else if (counter || counter === 0) {\n\t\t\tif (!this._seed) {\n\t\t\t\tthrow new Error('cannot create deterministic messages without seed');\n\t\t\t}\n\t\t\toutputData = OutputData.createDeterministicData(\n\t\t\t\tamount,\n\t\t\t\tthis._seed,\n\t\t\t\tcounter,\n\t\t\t\tkeyset,\n\t\t\t\toutputAmounts\n\t\t\t);\n\t\t} else if (p2pk) {\n\t\t\toutputData = OutputData.createP2PKData(p2pk, amount, keyset, outputAmounts);\n\t\t} else if (factory) {\n\t\t\tconst amounts = splitAmount(amount, keyset.keys);\n\t\t\toutputData = amounts.map((a) => factory(a, keyset));\n\t\t} else {\n\t\t\toutputData = OutputData.createRandomData(amount, keyset, outputAmounts);\n\t\t}\n\t\treturn outputData;\n\t}\n\n\t/**\n\t * Creates NUT-08 blank outputs (fee returns) for a given fee reserve\n\t * See: https://github.com/cashubtc/nuts/blob/main/08.md\n\t * @param amount amount to cover with blank outputs\n\t * @param keysetId mint keysetId\n\t * @param counter? optionally set counter to derive secret deterministically. CashuWallet class must be initialized with seed phrase to take effect\n\t * @returns blinded messages, secrets, and rs\n\t */\n\tprivate createBlankOutputs(\n\t\tamount: number,\n\t\tkeyset: MintKeys,\n\t\tcounter?: number,\n\t\tfactory?: OutputDataFactory\n\t): Array<OutputDataLike> {\n\t\tlet count = Math.ceil(Math.log2(amount)) || 1;\n\t\t//Prevent count from being -Infinity\n\t\tif (count < 0) {\n\t\t\tcount = 0;\n\t\t}\n\t\tconst amounts = count ? Array(count).fill(1) : [];\n\t\treturn this.createOutputData(amount, keyset, counter, undefined, amounts, undefined, factory);\n\t}\n}\n\nexport { CashuWallet };\n"],"names":["encodeUint8toBase64Url","bytes","Buffer","encodeBase64toUint8","base64String","encodeJsonToBase64","jsonObj","jsonString","base64urlFromBase64","encodeBase64ToJson","base64urlToBase64","str","isResultKeyType","value","encodeCBOR","buffer","encodeItem","encodeUnsigned","encodeString","encodeArray","encodeByteString","encodeObject","length","i","utf8","item","keys","key","decodeCBOR","data","view","decodeItem","offset","initialByte","majorType","additionalInfo","decodeUnsigned","decodeSigned","decodeByteString","decodeString","decodeArray","decodeMap","decodeSimpleAndFloat","decodeLength","hi","lo","newOffset","array","currentOffset","result","map","keyResult","valueResult","decodeFloat16","uint16","exponent","fraction","sign","PaymentRequest","transport","id","amount","unit","mints","description","singleUse","rawRequest","t","type","encodedRequest","encodedData","decoded","transports","TOKEN_VERSION","TOKEN_PREFIX","splitAmount","keyset","split","order","totalSplitAmount","sumArray","amt","hasCorrespondingKey","getKeysetAmounts","q","a","b","getKeepAmounts","proofsWeHave","amountToKeep","targetCount","amountsWeWant","amountsWeHave","p","countWeHave","countWeWant","amountDiff","k","bytesToNumber","hexToNumber","bytesToHex","hex","numberToHexPadded64","number","isValidHex","hasNonHexId","proof","getEncodedTokenV3","token","v3TokenObj","getEncodedToken","opts","getEncodedTokenV4","tokenTemplate","templateFromToken","prefix","version","base64Data","idMap","mint","hexToBytes","tokenFromTemplate","template","proofs","decodedToken","getDecodedToken","handleTokens","encodedToken","parsedV3Token","entry","tokenObj","uInt8Token","tokenData","deriveKeysetId","pubkeysConcat","pubKey","prev","curr","mergeUInt8Arrays","hash","sha256","a1","a2","mergedArray","isObj","v","joinUrls","parts","part","sanitizeUrl","url","sumProofs","acc","decodePaymentRequest","paymentRequest","MessageNode","message","node","MessageQueue","messageNode","newNode","stripDleq","newP","hasValidDleq","dleq","verifyDLEQProof_reblind","pointFromHex","concatByteArrays","arrays","totalLength","c","byteArray","pointer","getEncodedTokenBinary","utf8Encoder","binaryTemplate","getDecodedTokenBinary","utfDecoder","binaryToken","arr","_WS","injectWebSocketImpl","ws","getWebSocketImpl","ConnectionManager","newConn","WSConnection","res","rej","err","e","method","params","subId","callback","errorCallback","fn","parsed","notification","cb","CheckStateEnum","MeltQuoteState","MintQuoteState","PaymentRequestTransportType","HttpResponseError","status","globalRequestOptions","setGlobalRequestOptions","options","_request","endpoint","requestBody","requestHeaders","body","headers","response","error","detail","request","handleMeltQuoteResponseDeprecated","handleMintQuoteResponseDeprecated","handleMintInfoContactFieldDeprecated","contact","CashuMint","_mintUrl","_customRequest","mintUrl","customRequest","swapPayload","mintQuotePayload","quote","mintPayload","meltQuotePayload","meltPayload","checkPayload","keysetId","restorePayload","wsSegment","MintInfo","info","num","mintMeltInfo","BlindedMessage","B_","isOutputDataFactory","OutputData","blindedMessage","blidingFactor","secret","sig","blindSignature","A","constructProofFromPromise","serializeProof","p2pk","customSplit","newSecret","randomBytes","secretBytes","r","blindMessage","randomHex","seed","counter","deriveSecret","secretBytesAsHex","utf8SecretBytes","deterministicR","deriveBlindingFactor","DEFAULT_DENOMINATION_TARGET","DEFAULT_UNIT","CashuWallet","infoRes","keysets","activeKeysets","activeKeyset","unitKeysets","forceRefresh","requireDleq","outputAmounts","pubkey","privkey","outputData","newOutputData","swapTransaction","signatures","d","orderedProofs","s","o","offline","includeFees","includeDleq","keepProofsOffline","sendProofOffline","expectedFee","keepProofsSelect","sendProofs","sendRes","keep","send","serialized","amountToSend","sortedProofs","smallerProofs","nextBigger","remainder","selectedProofs","returnedProofs","feePPK","selectedFeePPK","total","nInputs","proofsToSend","amountAvailable","sendAmounts","outputFee","sendAmountsFee","keepAmounts","keepOutputData","sendOutputData","swapProofs","splitProofsToKeep","splitProofsToSend","reorderedKeepVector","reorderedProofs","start","count","amounts","outputs","promises","outputsWithSignatures","newBlindingData","invoice","meltQuote","getSignedProofs","meltResponse","customOutputData","totalAmount","keepAmount","factory","mergedBlindingData","indices","_","keepVector","sortedOutputData","sortedKeepVector","enc","Ys","hashToCurve","BATCH_SIZE","states","YsSlice","batchStates","stateMap","j","state","quoteIds","quoteId","proofMap","y","ys"],"mappings":"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"}